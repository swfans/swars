/******************************************************************************/
// Bullfrog Engine Emulation Library - for use to remake classic games like
// Syndicate Wars, Magic Carpet, Genewars or Dungeon Keeper.
/******************************************************************************/
/** @file bfgentab.h
 *     Header file for ggengh.cpp and ggenf.cpp.
 * @par Purpose:
 *     Unknown.
 * @par Comment:
 *     None.
 * @author   Tomasz Lis
 * @date     12 Nov 2008 - 05 Nov 2021
 * @par  Copying and copyrights:
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 */
/******************************************************************************/
#ifndef BFLIBRARY_BFGENTAB_H_
#define BFLIBRARY_BFGENTAB_H_

#include "bftypes.h"
#include "bfpalette.h"

#ifdef __cplusplus
extern "C" {
#endif

#pragma pack(1)

/** Colour tables, used for fading and merging colours in palette mode.
 *
 * In original assembly, these were separate arrays. But in order to
 * guarantee their position after each other in C, we need to define
 * them as a struct.
 */
struct TbColorTables {
  /** Table used for fading from black. */
  TbPixel fade_table[PALETTE_FADE_LEVELS*PALETTE_8b_COLORS];
  /** Table used for ghosting (merging/overlaying two colors). */
  TbPixel ghost_table[PALETTE_8b_COLORS*PALETTE_8b_COLORS];
  TbPixel flat_colours_tl[2*PALETTE_8b_COLORS];
  TbPixel flat_colours_tr[2*PALETTE_8b_COLORS];
  TbPixel flat_colours_br[2*PALETTE_8b_COLORS];
  TbPixel flat_colours_bl[2*PALETTE_8b_COLORS];
  TbPixel robs_bollocks[PALETTE_8b_COLORS];
};

#pragma pack()

extern struct TbColorTables pixmap;

/** Generate colour transistion tables and save to file.
 *
 * Generates tables for fading colours and merging colours.
 * Fills global arrays within pixmap struct with generated colour
 * manipulation data.
 * Unlike other such functions, this one makes no tries to load
 * the file before generating all the colors.
 *
 * Some games have special, modified by hand color tables. Generating
 * the automatic colour table for these games may decrease image clarity,
 * as they may use perception-based colour matching and treat certain
 * colour indexes differently based on where these colours are used.
 */
TbResult LbColourTablesGenerate(const u8 *palette, const TbPixel *unaffected,
  const char *fname);

/** Load colour transistion tables from file.
 *
 * Reads tables for fading colours and merging colours from file.
 * Fills global arrays within pixmap struct with loaded colour
 * manipulation data.
 */
TbResult LbColourTablesLoad(const u8 *palette, const char *fname);

/** Load or generate colour fading table.
 *
 * Generates table for fading any colour within given palette, to black.
 * The table simplify mixes each colour with black, storing PALETTE_FADE_LEVELS
 * of decreasing proportions in an array.
 * Fills global pixmap.fade_table buffer with data from given file.
 * If the file access fails, or file name is not provided, then the data is
 * instead generated by computing closest color indexes for fading.
 */
TbResult LbFadeTableGenerate(const u8 *palette, const TbPixel *unaffected,
  const char *fname);

/** Load colour fading table.
 *
 * This function loads only pixmap.fade_table from file. Consider storing and
 * loading the whole TbColorTables struct instead.
 */
TbResult LbFadeTableLoad(const u8 *palette, const char *fname);

/** Load or generate colour ghosting table.
 *
 * Generates tables for ghosting between any two colors within given palette.
 * The tables simplify overlaying two colours, by storing 8-bit colour indexes
 * in an array.
 * Fills global pixmap.ghost_table buffer with data from given file.
 * If the file access fails, or file name is not provided, then the data is
 * instead generated by computing closest color indexes for ghosting.
 */
TbResult LbGhostTableGenerate(const u8 *pal, short intens, const char *fname);

/** Load colour ghosting table, making sure it is symmetrical if at 50%.
 *
 * Loads colour table from disk. If requested intensity is 50%, it then
 * replaces diagonal half of the array, filling one triangle with corresponding
 * colours from the other triangle.
 * The diagonal copt makes the array return the came colour independently of
 * source colours order.
 *
 * This function loads only pixmap.ghost_table from file. Consider storing and
 * loading the whole TbColorTables struct instead.
 *
 * @param pal The palette which colour definitions are used.
 * @param intens Source palette intensity, in percent.
 *        Value 100 means first colour only, 0 means second colour only.
 * @param fname File name from which the table is loaded.
 */
TbResult LbGhostTableLoad(const u8 *pal, short intens, const char *fname);

#ifdef __cplusplus
};
#endif

#endif // BFLIBRARY_BFGENTAB_H_
/******************************************************************************/
