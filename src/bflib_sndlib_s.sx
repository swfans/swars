
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

.text

.global EXPORT_SYMBOL(AIL_error);

.global EXPORT_SYMBOL(MDI_ptr);
.global EXPORT_SYMBOL(MDI_event);
.global EXPORT_SYMBOL(MDI_status);
.global EXPORT_SYMBOL(MDI_len);
.global EXPORT_SYMBOL(MDI_type);
.global EXPORT_SYMBOL(MDI_channel);
.global EXPORT_SYMBOL(MDI_S);
.global EXPORT_SYMBOL(MDI_i);
.global EXPORT_SYMBOL(MDI_j);
.global EXPORT_SYMBOL(MDI_n);
.global EXPORT_SYMBOL(MDI_q);
.global EXPORT_SYMBOL(MDI_t);
.global EXPORT_SYMBOL(MDI_sequence_done);

/*----------------------------------------------------------------*/
AILSFILE_start_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,data_15aad8
		jne    jump_113fa9
		push   $AILSFILE_end_
		push   $AILSFILE_start_
		mov    $0x1,%ebx
		call   ac_AIL_VMM_lock_range
		add    $0x8,%esp
		mov    %ebx,data_15aad8
	jump_113fa9:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_AIL_VOC_block_len:
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%eax
		mov    (%eax),%eax
		shr    $0x8,%eax
		ret


/*----------------------------------------------------------------*/
ASM_AIL_VOC_terminate:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpl   $0x0,0x874(%ebx)
		je     jump_113fd8
		push   %ebx
		call   *0x874(%ebx)
		add    $0x4,%esp
	jump_113fd8:
		cmpl   $0x0,0x88c(%ebx)
		jle    jump_113fea
		push   %ebx
		call   ac_AIL_release_sample_handle
		add    $0x4,%esp
	jump_113fea:
		movl   $0xffffffff,0x88c(%ebx)
		pop    %ebx
		ret

vtable_113ff8:
		.long   func_11404b
		.long   func_114059
		.long   func_114271
		.long   func_114271
		.long   func_1140c2
		.long   func_114271
		.long   func_1140f7
		.long   func_11410e
		.long   func_114138
		.long   func_1141d6


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AIL_process_VOC_block)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%ebp
		xor    %edi,%edi
	jump_11402e:
		mov    0x878(%ebx),%esi
		mov    (%esi),%al
		cmp    $0x9,%al
		ja     func_114271
		and    $0xff,%eax
		jmp    *%cs:vtable_113ff8(,%eax,4)


/*----------------------------------------------------------------*/
func_11404b:
/*----------------------------------------------------------------*/
		push   %ebx
		call   ac_AIL_VOC_terminate
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_114059:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		push   %esi
		call   ac_AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0x2,%eax
		push   %eax
		lea    0x6(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		xor    %eax,%eax
		mov    $0x100,%edi
		mov    0x4(%esi),%al
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0xf4240,%eax
		div    %edi
		add    $0xc,%esp
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		push   $0x0
		push   $0x0
		push   %ebx
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
		jmp    jump_11426c


/*----------------------------------------------------------------*/
func_1140c2:
/*----------------------------------------------------------------*/
		mov    0x884(%ebx),%ecx
		cmp    $0xffffffff,%ecx
		je     func_114271
		movswl 0x4(%esi),%eax
		cmp    %ecx,%eax
		jne    jump_1140e8
		movl   $0x1,0x888(%ebx)
		jmp    func_114271
	jump_1140e8:
		movl   $0x0,0x888(%ebx)
		jmp    func_114271


/*----------------------------------------------------------------*/
func_1140f7:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %esi,0x87c(%ebx)
		mov    0x4(%esi),%ax
		mov    %eax,0x880(%ebx)
		jmp    func_114271


/*----------------------------------------------------------------*/
func_11410e:
/*----------------------------------------------------------------*/
		mov    0x880(%ebx),%edx
		cmp    $0xffff,%edx
		je     jump_11412d
		mov    %edx,%eax
		dec    %edx
		mov    %edx,0x880(%ebx)
		test   %eax,%eax
		je     func_114271
	jump_11412d:
		mov    0x87c(%ebx),%esi
		jmp    func_114271


/*----------------------------------------------------------------*/
func_114138:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		cmpb   $0x0,0x7(%esi)
		je     jump_11416b
		push   $0x0
		push   $0x2
		push   %ebx
		call   ac_AIL_set_sample_type
		xor    %eax,%eax
		mov    $0x10000,%edi
		mov    0x4(%esi),%ax
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0x7a12000,%eax
		jmp    jump_114189
	jump_11416b:
		push   $0x0
		push   $0x0
		push   %ebx
		call   ac_AIL_set_sample_type
		xor    %eax,%eax
		mov    $0x10000,%edi
		mov    0x4(%esi),%ax
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0xf424000,%eax
	jump_114189:
		div    %edi
		add    $0xc,%esp
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		push   %esi
		call   ac_AIL_VOC_block_len
		add    %eax,%esi
		add    $0x4,%esp
		add    $0x4,%esi
		push   %esi
		call   ac_AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0x2,%eax
		push   %eax
		lea    0x6(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
		jmp    jump_11426c


/*----------------------------------------------------------------*/
func_1141d6:
/*----------------------------------------------------------------*/
		cmpl   $0x0,0x888(%ebx)
		je     func_114271
		push   %esi
		call   ac_AIL_VOC_block_len
		add    $0x4,%esp
		sub    $0xc,%eax
		push   %eax
		lea    0x10(%esi),%eax
		push   %eax
		push   %ebx
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		mov    0x4(%esi),%ecx
		push   %ecx
		push   %ebx
		call   ac_AIL_set_sample_playback_rate
		mov    0x9(%esi),%ah
		add    $0x8,%esp
		cmp    $0x1,%ah
		jne    jump_11421f
		cmpw   $0x0,0xa(%esi)
		jne    jump_11421f
		push   $0x0
		push   $0x0
		jmp    jump_114256
	jump_11421f:
		cmpb   $0x2,0x9(%esi)
		jne    jump_114232
		cmpw   $0x0,0xa(%esi)
		jne    jump_114232
		push   $0x0
		push   $0x2
		jmp    jump_114256
	jump_114232:
		cmpb   $0x1,0x9(%esi)
		jne    jump_114245
		cmpw   $0x4,0xa(%esi)
		jne    jump_114245
		push   $0x1
		push   $0x1
		jmp    jump_114256
	jump_114245:
		cmpb   $0x2,0x9(%esi)
		jne    jump_11425f
		cmpw   $0x4,0xa(%esi)
		jne    jump_11425f
		push   $0x1
		push   $0x3
	jump_114256:
		push   %ebx
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
	jump_11425f:
		test   %ebp,%ebp
		je     jump_11426c
		push   %ebx
		call   ac_AIL_start_sample
		add    $0x4,%esp
	jump_11426c:
		mov    $0x1,%edi


/*----------------------------------------------------------------*/
func_114271:
/*----------------------------------------------------------------*/
		push   %esi
		call   ac_AIL_VOC_block_len
		add    %esi,%eax
		add    $0x4,%eax
		add    $0x4,%esp
		mov    %eax,0x878(%ebx)
		test   %edi,%edi
		je     jump_11402e
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AIL_VOC_EOS:
/*----------------------------------------------------------------*/
		push   $0x1
		mov    0x8(%esp),%edx
		push   %edx
		call   ac_AIL_process_VOC_block
		add    $0x8,%esp
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AIL_process_WAV_image)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		mov    0x14(%esp),%edi
		mov    0x10(%esp),%esi
		mov    $ascFmt,%ecx
		add    $0xc,%esi
	jump_1142c3:
		mov    $0x4,%ebx
		mov    %ecx,%edx
		mov    %esi,%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_1142e7
		mov    0x4(%esi),%eax
		add    %esi,%eax
		mov    0x4(%esi),%esi
		add    $0x8,%eax
		and    $0x1,%esi
		add    %eax,%esi
		jmp    jump_1142c3
	jump_1142e7:
		cmpw   $0x1,0xa(%esi)
		jne    jump_1142f9
		cmpw   $0x8,0x16(%esi)
		jne    jump_1142f9
		push   %eax
		push   %eax
		jmp    jump_114333
	jump_1142f9:
		cmpw   $0x2,0xa(%esi)
		jne    jump_11430d
		cmpw   $0x8,0x16(%esi)
		jne    jump_11430d
		push   $0x0
		push   $0x2
		jmp    jump_114333
	jump_11430d:
		cmpw   $0x1,0xa(%esi)
		jne    jump_114321
		cmpw   $0x10,0x16(%esi)
		jne    jump_114321
		push   $0x1
		push   $0x1
		jmp    jump_114333
	jump_114321:
		cmpw   $0x2,0xa(%esi)
		jne    jump_11433c
		cmpw   $0x10,0x16(%esi)
		jne    jump_11433c
		push   $0x1
		push   $0x3
	jump_114333:
		push   %edi
		call   ac_AIL_set_sample_type
		add    $0xc,%esp
	jump_11433c:
		mov    0xc(%esi),%edx
		push   %edx
		push   %edi
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		mov    0x10(%esp),%esi
		add    $0xc,%esi
		mov    $0x4,%ecx
	jump_114355:
		mov    $ascData,%edx
		mov    %ecx,%ebx
		mov    %esi,%eax
		call   ac_strnicmp
		test   %eax,%eax
		je     jump_114379
		mov    0x4(%esi),%eax
		mov    0x4(%esi),%edx
		add    %esi,%eax
		and    $0x1,%edx
		lea    0x8(%eax),%esi
		add    %edx,%esi
		jmp    jump_114355
	jump_114379:
		mov    0x4(%esi),%ebx
		push   %ebx
		add    $0x8,%esi
		push   %esi
		push   %edi
		call   ac_AIL_set_sample_address
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AIL_WAV_EOS:
/*----------------------------------------------------------------*/
		push   %ebx
		mov    0x8(%esp),%ebx
		cmpl   $0x0,0x874(%ebx)
		je     jump_1143a8
		push   %ebx
		call   *0x874(%ebx)
		add    $0x4,%esp
	jump_1143a8:
		cmpl   $0x0,0x88c(%ebx)
		jle    jump_1143ba
		push   %ebx
		call   ac_AIL_release_sample_handle
		add    $0x4,%esp
	jump_1143ba:
		movl   $0xffffffff,0x88c(%ebx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILSFILE_end_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,data_15aad8
		je     jump_114626
		push   $AILSFILE_end_
		push   $AILSFILE_start_
		xor    %ebx,%ebx
		call   ac_AIL_VMM_unlock_range
		add    $0x8,%esp
		mov    %ebx,data_15aad8
	jump_114626:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILXMIDI_start_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,MDI_locked
		jne    jump_114741
		push   $AILXMIDI_end_
		push   $AILXMIDI_start_
		call   ac_AIL_VMM_lock_range
		add    $0x8,%esp
		push   $0x80
		push   $GTL_prefix
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_entry
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_S)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_i)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_j)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_n)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_sequence_done)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_q)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_t)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_channel)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_status)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_type)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_len)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_ptr)
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_event)
		mov    $0x1,%ebx
		call   ac_AIL_vmm_lock
		add    $0x8,%esp
		mov    %ebx,MDI_locked
	jump_114741:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
_AIL_API_branch_index:	/* 0x117170 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x14(%esp),%edi
		mov    0x18(%esp),%esi
		test   %edi,%edi
		je     jump_1171f9
		mov    0xc(%edi),%edx
		test   %edx,%edx
		je     jump_1171f9
		mov    %edx,%eax
		lea    0xa(%edx),%ebp
		movswl 0x8(%edx),%ecx
		xor    %edx,%eax
		test   %ecx,%ecx
		jle    jump_1171b1
		mov    %ebp,%edx
	jump_1171a0:
		xor    %ebx,%ebx
		mov    (%edx),%bx
		cmp    %esi,%ebx
		je     jump_1171b1
		inc    %eax
		add    $0x6,%edx
		cmp    %ecx,%eax
		jl     jump_1171a0
	jump_1171b1:
		cmp    %ecx,%eax
		je     jump_1171f9
		mov    %eax,%edx
		lea    0x0(,%eax,4),%eax
		sub    %edx,%eax
		add    %eax,%eax
		add    %eax,%ebp
		mov    0x10(%edi),%eax
		mov    0x2(%ebp),%edx
		add    $0x8,%eax
		movl   $0x0,0x30(%edi)
		add    %edx,%eax
		mov    EXPORT_SYMBOL(AIL_preference)+60,%ebx	/* AIL_preference[MDI_ALLOW_LOOP_BRANCHING] */
		mov    %eax,0x14(%edi)
		test   %ebx,%ebx
		jne    jump_1171f9
		mov    %edi,%eax
		lea    0x10(%edi),%edx
	jump_1171e8:
		add    $0x4,%eax
		movl   $0xffffffff,0x80(%eax)
		cmp    %edx,%eax
		jne    jump_1171e8
	jump_1171f9:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AILXMIDI_end_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpl   $0x0,MDI_locked
		je     jump_11781f
		push   $AILXMIDI_end_
		push   $AILXMIDI_start_
		call   ac_AIL_VMM_unlock_range
		add    $0x8,%esp
		push   $0x80
		push   $GTL_prefix
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $MDI_entry
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_S)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_i)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_n)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_sequence_done)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_q)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_t)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_channel)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_status)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_type)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_len)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_ptr)
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		push   $0x4
		push   $EXPORT_SYMBOL(MDI_event)
		xor    %ebx,%ebx
		call   ac_AIL_vmm_unlock
		add    $0x8,%esp
		mov    %ebx,MDI_locked
	jump_11781f:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

.data


GLOBAL (volume_pan_table)	/* 0x15AA50 */
		.ascii  "\x00\x02\x04\x06\x08\x0a\x0c\x0e"
		.ascii  "\x10\x12\x14\x16\x18\x1a\x1c\x1e"
		.ascii  " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.ascii  "\x80\x80\x80\x80\x80\x80\x80\x80"
		.byte	0x80
data_15aad0:
		.long	0x0
data_15aad4:
		.long	0x0
data_15aad8:
		.long	0x0
GLOBAL (GTL_prefix)				/* 0x15AADC */
		.string "sample"
		.fill   0x79
GLOBAL (MDI_entry)				/* 0x15ab5c */
		.long	0x0
GLOBAL (MDI_locked)
		.long	0x0
aTimb_0:	/* 0x15AB64 */
		.string "TIMB"
		.ascii  "\x00\x00\x04\x01\x00"
data_15ab6e:
		.byte	0xff
data_15ab6f:
		.byte	0xff
_locked_AILXDIG:				/* 0x15AB70 */
		.long	0x0


ascFmt:	/* 0x161A90 */
		.string "fmt "
		.ascii  "\x00\x00\x00"
ascData:	/* 0x161A98 */
		.string "data"
		.ascii  "\x00\x00\x00"
ascCreative:	/* 0x161AA0 */
		.string "Creative"
		.ascii  "\x00\x00\x00"
ascWave:	/* 0x161AAC */
		.string "WAVE"
		.ascii  "\x00\x00\x00"
aUnrecognized_0:	/* 0x161AB4 */
		.string "Unrecognized digital audio file type\n"
		.short  0x0
aInvalidOrMis_0:	/* 0x161ADC */
		.string "Invalid or missing data block\n"
		.byte	0x0
aUnrecognizedDi:	/* 0x161AFC */
		.string "Unrecognized digital audio file type\n"
		.short  0x0
aInvalidOrMissi:	/* 0x161B24 */
		.string "Invalid or missing data block\n"
		.byte	0x0

