
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

.text

.global EXPORT_SYMBOL(sb16_mixer_set);


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_LoadSounds)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x20,%esp
		mov    %al,0x1c(%esp)
		movzbw %al,%di
		xor    %eax,%eax
		mov    0x1c(%esp),%al
		push   %eax
		push   $aBf42LoadSoundB
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0xc,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		cmpb   $0x0,SoundInstalled
		je     jump_ec8ae
		cmpb   $0x0,SoundAble
		je     jump_ec8ae
		xor    %eax,%eax
		movsbl CurrentSoundBank,%edx
		mov    %di,%ax
		cmp    %eax,%edx
		je     jump_ec8ae
		cmpb   $0x0,DisableLoadSounds
		jne    jump_ec8ae
		call   ac_StopAllSamples
		mov    $0x2,%edx
		mov    $full_sound_data_path,%eax
		call   ac_LbFileOpen
		mov    %eax,%ecx
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		jne    jump_ec763
		jmp    jump_ec8a7
	jump_ec6f0:
		xor    %edx,%edx
		mov    %edx,0x18(%esp)
		jmp    jump_ec815
	jump_ec6fb:
		movl   $0x1,0x18(%esp)
		jmp    jump_ec815
	jump_ec708:
		movl   $0x2,0x18(%esp)
		jmp    jump_ec815
	jump_ec715:
		movl   $0x3,0x18(%esp)
		jmp    jump_ec815
	jump_ec722:
		movl   $0x4,0x18(%esp)
		jmp    jump_ec815
	jump_ec72f:
		movl   $0x5,0x18(%esp)
		jmp    jump_ec815
	jump_ec73c:
		movl   $0x6,0x18(%esp)
		jmp    jump_ec815
	jump_ec749:
		movl   $0x7,0x18(%esp)
		jmp    jump_ec815
	jump_ec756:
		movl   $0x8,0x18(%esp)
		jmp    jump_ec815
	jump_ec763:
		mov    $full_sound_data_path,%eax
		call   ac_LbFileLength
		lea    -0x4(%eax),%edx
		xor    %ebx,%ebx
		mov    %ecx,%eax
		call   ac_LbFileSeek
		mov    $0x4,%ebx
		lea    0x14(%esp),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    0x14(%esp),%edx
		mov    %ecx,%eax
		xor    %ebx,%ebx
		call   ac_LbFileSeek
		mov    $0x12,%ebx
		mov    %esp,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    SoundType,%ax
		inc    %edi
		cmp    $0x64b,%ax
		jb     jump_ec7e7
		jbe    jump_ec722
		cmp    $0x656,%ax
		jb     jump_ec7db
		jbe    jump_ec708
		cmp    $0x668,%ax
		jb     jump_ec815
		jbe    jump_ec6fb
		cmp    $0x66c,%ax
		je     jump_ec6f0
		jmp    jump_ec815
	jump_ec7db:
		cmp    $0x654,%ax
		je     jump_ec715
		jmp    jump_ec815
	jump_ec7e7:
		cmp    $0x32b,%ax
		jb     jump_ec80b
		jbe    jump_ec749
		cmp    $0x336,%ax
		jb     jump_ec815
		jbe    jump_ec73c
		cmp    $0x64a,%ax
		je     jump_ec72f
		jmp    jump_ec815
	jump_ec80b:
		cmp    $0x320,%ax
		je     jump_ec756
	jump_ec815:
		mov    0x18(%esp),%eax
		cmp    (%esp,%eax,2),%di
		jbe    jump_ec830
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf43LoadSoundB
		jmp    jump_ec8e3
	jump_ec830:
		dec    %edi
		xor    %ecx,%ecx
		mov    %di,%cx
		lea    0x0(,%ecx,8),%edx
		mov    $0x1,%ebx
		add    %ecx,%edx
		mov    %esi,%eax
		shl    $0x4,%edx
		call   ac_LbFileSeek
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x18(%esp),%dl
		call   load_sound_bank
		test   %al,%al
		jne    jump_ec870
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf44LoadSoundB
		jmp    jump_ec8e3
	jump_ec870:
		mov    0x1c(%esp),%al
		mov    %al,CurrentSoundBank
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf45LoadSoundB
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0x8,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		xor    %eax,%eax
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ec8a7:
		push   $aBf46LoadSoundB
		jmp    jump_ec8e3
	jump_ec8ae:
		cmpb   $0x0,SoundInstalled
		jne    jump_ec8be
		push   $aBf47LoadSoundB
		jmp    jump_ec8e3
	jump_ec8be:
		cmpb   $0x0,SoundAble
		jne    jump_ec8ce
		push   $aBf47LoadSoun_0
		jmp    jump_ec8e3
	jump_ec8ce:
		cmpb   $0x0,DisableLoadSounds
		je     jump_ec8de
		push   $aBf47LoadSoun_1
		jmp    jump_ec8e3
	jump_ec8de:
		push   $aBf47LoadSoun_2
	jump_ec8e3:
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0x8,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		mov    $0x1,%eax
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void format_sounds(void)
 */
format_sounds:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(NumberOfSamples),%bx
		mov    EXPORT_SYMBOL(EndSfxs),%ecx
		mov    EXPORT_SYMBOL(SfxData),%esi
		mov    EXPORT_SYMBOL(Sfx),%edx
		test   %edx,%edx
		je     jump_ec94f
		test   %esi,%esi
		je     jump_ec94f
		lea    0x20(%edx),%eax
		xor    %ebx,%ebx
		cmp    %ecx,%eax
		jae    jump_ec94f
	jump_ec93f:
		mov    0x12(%eax),%edi
		add    $0x20,%eax
		add    %esi,%edi
		inc    %ebx
		mov    %edi,-0xe(%eax)
		cmp    %ecx,%eax
		jb     jump_ec93f
	jump_ec94f:
		mov    %esi,EXPORT_SYMBOL(SfxData)
		mov    %ecx,EXPORT_SYMBOL(EndSfxs)
		mov    %bx,EXPORT_SYMBOL(NumberOfSamples)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* unsigned char load_sound_bank(long, unsigned char)
 */
load_sound_bank:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x94,%esp
		mov    %eax,%ecx
		mov    %dl,0x90(%esp)
		call   ac_LbFilePosition
		mov    $0x90,%ebx
		mov    %esp,%edx
		movzbl 0x90(%esp),%ebp
		mov    %ecx,%eax
		shl    $0x4,%ebp
		call   ac_LbFileRead
		cmpl   $0xffffffff,0x4(%esp,%ebp,1)
		je     jump_ecb73
		xor    %ah,%ah
		mov    EXPORT_SYMBOL(SfxData),%ebx
		mov    %ah,SoundAble
		test   %ebx,%ebx
		je     jump_ecb73
		cmpl   $0x0,EXPORT_SYMBOL(Sfx)
		je     jump_ecb73
		mov    largest_dat_size,%ebx
		mov    EXPORT_SYMBOL(SfxData),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    largest_tab_size,%ebx
		mov    EXPORT_SYMBOL(Sfx),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(Sfx),%esi
		mov    0x8(%esp,%ebp,1),%eax
		lea    (%esi,%eax,1),%edx
		xor    %ebx,%ebx
		mov    %edx,EXPORT_SYMBOL(EndSfxs)
		mov    %ecx,%eax
		mov    0x4(%esp,%ebp,1),%edx
		mov    EXPORT_SYMBOL(SfxData),%edi
		call   ac_LbFileSeek
		mov    $0x8,%ebx
		mov    EXPORT_SYMBOL(SfxData),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %eax,%eax
		mov    (%edi),%al
		cmp    $0x52,%eax
		jne    jump_eca8a
		xor    %eax,%eax
		mov    0x1(%edi),%al
		cmp    $0x4e,%eax
		jne    jump_eca8a
		xor    %eax,%eax
		mov    0x2(%edi),%al
		cmp    $0x43,%eax
		jne    jump_eca8a
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%edi),%al
		mov    0x5(%edi),%dl
		shl    $0x8,%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x6(%edi),%dl
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x7(%edi),%dl
		add    %edx,%eax
		mov    EXPORT_SYMBOL(SfxData),%edx
		lea    -0x8(%eax),%ebx
		add    $0x8,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    %edi,%edx
		mov    %edi,%eax
		call   ac_UnpackM1
		jmp    jump_ecaad
	jump_eca8a:
		xor    %ebx,%ebx
		mov    0x90(%esp),%bl
		mov    EXPORT_SYMBOL(SfxData),%edx
		shl    $0x4,%ebx
		mov    %ecx,%eax
		mov    0xc(%esp,%ebx,1),%ebx
		add    $0x8,%edx
		sub    $0x8,%ebx
		call   ac_LbFileRead
	jump_ecaad:
		xor    %eax,%eax
		mov    0x90(%esp),%al
		shl    $0x4,%eax
		xor    %ebx,%ebx
		mov    (%esp,%eax,1),%edx
		mov    %ecx,%eax
		call   ac_LbFileSeek
		mov    $0x8,%ebx
		mov    EXPORT_SYMBOL(Sfx),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %eax,%eax
		mov    (%esi),%al
		cmp    $0x52,%eax
		jne    jump_ecb35
		xor    %eax,%eax
		mov    0x1(%esi),%al
		cmp    $0x4e,%eax
		jne    jump_ecb35
		xor    %eax,%eax
		mov    0x2(%esi),%al
		cmp    $0x43,%eax
		jne    jump_ecb35
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%esi),%al
		mov    0x5(%esi),%dl
		shl    $0x8,%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x6(%esi),%dl
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x7(%esi),%dl
		add    %edx,%eax
		mov    EXPORT_SYMBOL(Sfx),%edx
		lea    -0x8(%eax),%ebx
		add    $0x8,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    %esi,%edx
		mov    %esi,%eax
		call   ac_UnpackM1
		jmp    jump_ecb58
	jump_ecb35:
		xor    %eax,%eax
		mov    0x90(%esp),%al
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(Sfx),%edx
		mov    0x8(%esp,%eax,1),%ebx
		add    $0x8,%edx
		sub    $0x8,%ebx
		mov    %ecx,%eax
		call   ac_LbFileRead
	jump_ecb58:
		mov    $0x1,%dl
		call   format_sounds
		mov    %dl,SoundAble
		mov    %dl,%al
		add    $0x94,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_ecb73:
		xor    %al,%al
		add    $0x94,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
AllocateSoundBankMemory_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ecx
		push   $SoundDataPath
		push   $aSSound_dat
		push   $full_sound_data_path
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x2,%edx
		mov    $full_sound_data_path,%eax
		call   ac_LbFileOpen
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		jne    jump_ecc6f
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ecbd6:
		mov    sound_bank_size_info_Bnk0Fld0,%esi
		mov    sound_bank_size_info_Bnk0Fld1,%edi
		jmp    jump_ecd39
	jump_ecbe7:
		mov    sound_bank_size_info_Bnk1Fld0,%esi
		mov    sound_bank_size_info_Bnk1Fld1,%edi
		jmp    jump_ecd39
	jump_ecbf8:
		mov    sound_bank_size_info_Bnk2Fld0,%esi
		mov    sound_bank_size_info_Bnk2Fld1,%edi
		jmp    jump_ecd39
	jump_ecc09:
		mov    sound_bank_size_info_Bnk3Fld0,%esi
		mov    sound_bank_size_info_Bnk3Fld1,%edi
		jmp    jump_ecd39
	jump_ecc1a:
		mov    sound_bank_size_info_Bnk4Fld0,%esi
		mov    sound_bank_size_info_Bnk4Fld1,%edi
		jmp    jump_ecd39
	jump_ecc2b:
		mov    sound_bank_size_info_Bnk5Fld0,%esi
		mov    sound_bank_size_info_Bnk5Fld1,%edi
		jmp    jump_ecd39
	jump_ecc3c:
		mov    sound_bank_size_info_Bnk6Fld0,%esi
		mov    sound_bank_size_info_Bnk6Fld1,%edi
		jmp    jump_ecd39
	jump_ecc4d:
		mov    sound_bank_size_info_Bnk7Fld0,%esi
		mov    sound_bank_size_info_Bnk7Fld1,%edi
		jmp    jump_ecd39
	jump_ecc5e:
		mov    sound_bank_size_info_Bnk8Fld0,%esi
		mov    sound_bank_size_info_Bnk8Fld1,%edi
		jmp    jump_ecd39
	jump_ecc6f:
		mov    $full_sound_data_path,%eax
		mov    $0x48,%ebx
		call   ac_LbFileLength
		xor    %edx,%edx
		mov    %eax,(%esp)
		mov    $sound_bank_size_info_Bnk0Fld0,%eax
		call   ac_memset
		mov    $0x2,%ebx
		mov    %ebp,%eax
		xor    %edx,%edx
		call   ac_LbFileSeek
		mov    (%esp),%edx
		mov    %ebp,%eax
		xor    %ebx,%ebx
		sub    $0x4c,%edx
		call   ac_LbFileSeek
		mov    $0x48,%ebx
		mov    $sound_bank_size_info_Bnk0Fld0,%edx
		mov    %ebp,%eax
		xor    %edi,%edi
		call   ac_LbFileRead
		mov    %ebp,%eax
		xor    %esi,%esi
		call   ac_LbFileClose
		cmp    $0x64b,%cx
		jb     jump_ecd07
		jbe    jump_ecc1a
		cmp    $0x656,%cx
		jb     jump_eccfa
		jbe    jump_ecbf8
		cmp    $0x668,%cx
		jb     jump_ecd39
		jbe    jump_ecbe7
		cmp    $0x66c,%cx
		je     jump_ecbd6
		jmp    jump_ecd39
	jump_eccfa:
		cmp    $0x654,%cx
		je     jump_ecc09
		jmp    jump_ecd39
	jump_ecd07:
		cmp    $0x32b,%cx
		jb     jump_ecd2e
		jbe    jump_ecc4d
		cmp    $0x336,%cx
		jb     jump_ecd39
		jbe    jump_ecc3c
		cmp    $0x64a,%cx
		je     jump_ecc2b
		jmp    jump_ecd39
	jump_ecd2e:
		cmp    $0x320,%cx
		je     jump_ecc5e
	jump_ecd39:
		test   %esi,%esi
		je     jump_ecdee
		test   %edi,%edi
		je     jump_ecdee
		lea    0x100(%esi),%ebp
		mov    %ebp,%eax
		call   ac_LbMemoryAlloc
		push   %ebp
		push   $aSoundDataSizeD
		push   $SoundProgressMessage
		mov    %eax,EXPORT_SYMBOL(SfxData)
		call   ac_sprintf
		add    $0xc,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		lea    0x100(%edi),%eax
		call   ac_LbMemoryAlloc
		mov    EXPORT_SYMBOL(SfxData),%edx
		mov    %eax,EXPORT_SYMBOL(Sfx)
		test   %edx,%edx
		je     jump_ecd96
		test   %eax,%eax
		jne    jump_ecdb6
	jump_ecd96:
		mov    EXPORT_SYMBOL(SfxData),%eax
		call   ac_LbMemoryFree
		mov    EXPORT_SYMBOL(Sfx),%eax
		call   ac_LbMemoryFree
		xor    %eax,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ecdb6:
		mov    %esi,largest_dat_size
		mov    %edx,%eax
		mov    %esi,%ebx
		xor    %edx,%edx
		mov    %edi,largest_tab_size
		call   ac_memset
		mov    largest_tab_size,%ebx
		mov    EXPORT_SYMBOL(Sfx),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ecdee:
		mov    $0xfffffffe,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_LoadMusic)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x10,%esp
		mov    %eax,%edi
		xor    %eax,%eax
		mov    %di,%ax
		push   %eax
		push   $aBf48LoadMusicB
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0xc,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ecfef
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ecfef
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DisableLoadMusic),%al
		test   %eax,%eax
		jne    jump_ecfef
		call   ac_StopMusic
		mov    $0x2,%edx
		mov    $full_music_data_path,%eax
		call   ac_LbFileOpen
		mov    %eax,%ecx
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		jne    jump_eced9
		jmp    jump_ecfe8
	jump_ecea7:
		xor    %ecx,%ecx
		mov    %ecx,0xc(%esp)
		jmp    jump_ecf72
	jump_eceb2:
		movl   $0x1,0xc(%esp)
		jmp    jump_ecf72
	jump_ecebf:
		movl   $0x2,0xc(%esp)
		jmp    jump_ecf72
	jump_ececc:
		movl   $0x3,0xc(%esp)
		jmp    jump_ecf72
	jump_eced9:
		mov    $0x2,%ebx
		xor    %edx,%edx
		call   ac_LbFileSeek
		mov    %ecx,%eax
		call   ac_LbFilePosition
		lea    -0x4(%eax),%edx
		xor    %ebx,%ebx
		mov    %ecx,%eax
		call   ac_LbFileSeek
		mov    $0x4,%ebx
		lea    0x8(%esp),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    0x8(%esp),%edx
		mov    %ecx,%eax
		xor    %ebx,%ebx
		call   ac_LbFileSeek
		mov    $0x8,%ebx
		mov    %esp,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    EXPORT_SYMBOL(MusicType),%cl
		inc    %edi
		cmp    $0x57,%cl
		jb     jump_ecf53
		jbe    jump_ececc
		cmp    $0x67,%cl
		jb     jump_ecf4e
		jbe    jump_ecea7
		cmp    $0x72,%cl
		jb     jump_ecf72
		jbe    jump_eceb2
		cmp    $0x77,%cl
		je     jump_ececc
		jmp    jump_ecf72
	jump_ecf4e:
		cmp    $0x66,%cl
		jmp    jump_ecf6c
	jump_ecf53:
		cmp    $0x47,%cl
		jb     jump_ecf69
		jbe    jump_ecea7
		cmp    $0x52,%cl
		je     jump_eceb2
		jmp    jump_ecf72
	jump_ecf69:
		cmp    $0x46,%cl
	jump_ecf6c:
		je     jump_ecebf
	jump_ecf72:
		mov    0xc(%esp),%eax
		cmp    (%esp,%eax,2),%di
		jbe    jump_ecf8d
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf49LoadMusicB
		jmp    jump_ed01d
	jump_ecf8d:
		dec    %edi
		xor    %edx,%edx
		mov    $0x1,%ebx
		mov    %di,%dx
		mov    %esi,%eax
		shl    $0x6,%edx
		call   ac_LbFileSeek
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0xc(%esp),%dl
		call   ac_load_music_bank
		test   %al,%al
		jne    jump_ecfc1
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf50LoadMusicB
		jmp    jump_ed01d
	jump_ecfc1:
		mov    %esi,%eax
		call   ac_LbFileClose
		push   $aBf51LoadMusicB
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0x8,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
		xor    %eax,%eax
		jmp    jump_ed039
	jump_ecfe8:
		push   $aBf52LoadMusicB
		jmp    jump_ed01d
	jump_ecfef:
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		jne    jump_ecfff
		push   $aBf53LoadMusicB
		jmp    jump_ed01d
	jump_ecfff:
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		jne    jump_ed00f
		push   $aBf53LoadMusi_0
		jmp    jump_ed01d
	jump_ed00f:
		cmpb   $0x0,EXPORT_SYMBOL(DisableLoadMusic)
		je     jump_ed034
		push   $aBf53LoadMusi_1
	jump_ed01d:
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0x8,%esp
		mov    $SoundProgressMessage,%eax
		call   ac_SoundProgressLog
	jump_ed034:
		mov    $0x1,%eax
	jump_ed039:
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void format_music(void)
 */
format_music:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(NumberOfSongs),%bx
		mov    BfEndMusic,%ecx
		mov    BfMusicData,%esi
		mov    BfMusic,%edx
		test   %edx,%edx
		je     jump_ed08f
		test   %esi,%esi
		je     jump_ed08f
		lea    0x20(%edx),%eax
		xor    %ebx,%ebx
		cmp    %ecx,%eax
		jae    jump_ed08f
	jump_ed07f:
		mov    0x12(%eax),%edi
		add    $0x20,%eax
		add    %esi,%edi
		inc    %ebx
		mov    %edi,-0xe(%eax)
		cmp    %ecx,%eax
		jb     jump_ed07f
	jump_ed08f:
		mov    %esi,BfMusicData
		mov    %ecx,BfEndMusic
		mov    %bx,EXPORT_SYMBOL(NumberOfSongs)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_load_music_bank)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x44,%esp
		mov    %eax,%ecx
		mov    %dl,0x40(%esp)
		call   ac_LbFilePosition
		mov    $0x40,%ebx
		mov    %esp,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %eax,%eax
		mov    0x40(%esp),%al
		shl    $0x4,%eax
		cmpl   $0xffffffff,0x4(%esp,%eax,1)
		je     jump_ed299
		mov    BfMusicData,%ebx
		test   %ebx,%ebx
		je     jump_ed299
		mov    BfMusic,%esi
		test   %esi,%esi
		je     jump_ed299
		mov    0x8(%esp,%eax,1),%edx
		mov    %ebx,%edi
		lea    (%esi,%edx,1),%ebx
		mov    %ebx,BfEndMusic
		mov    0x4(%esp,%eax,1),%edx
		mov    %ecx,%eax
		xor    %ebx,%ebx
		call   ac_LbFileSeek
		mov    $0x8,%ebx
		mov    %edi,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %eax,%eax
		mov    (%edi),%al
		cmp    $0x52,%eax
		jne    jump_ed189
		xor    %eax,%eax
		mov    0x1(%edi),%al
		cmp    $0x4e,%eax
		jne    jump_ed189
		xor    %eax,%eax
		mov    0x2(%edi),%al
		cmp    $0x43,%eax
		jne    jump_ed189
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%edi),%al
		mov    0x5(%edi),%dl
		shl    $0x8,%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x6(%edi),%dl
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x7(%edi),%dl
		add    %edx,%eax
		mov    BfMusicData,%edx
		lea    -0x8(%eax),%ebx
		add    $0x8,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    %edi,%edx
		mov    %edi,%eax
		call   ac_UnpackM1
		jmp    jump_ed1a9
	jump_ed189:
		xor    %eax,%eax
		mov    0x40(%esp),%al
		shl    $0x4,%eax
		mov    BfMusicData,%edx
		mov    0xc(%esp,%eax,1),%ebx
		add    $0x8,%edx
		sub    $0x8,%ebx
		mov    %ecx,%eax
		call   ac_LbFileRead
	jump_ed1a9:
		xor    %edx,%edx
		mov    0x40(%esp),%dl
		mov    %ecx,%eax
		shl    $0x4,%edx
		xor    %ebx,%ebx
		mov    (%esp,%edx,1),%edx
		call   ac_LbFileSeek
		mov    $0x8,%ebx
		mov    %esi,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %eax,%eax
		mov    (%esi),%al
		cmp    $0x52,%eax
		jne    jump_ed22a
		xor    %eax,%eax
		mov    0x1(%esi),%al
		cmp    $0x4e,%eax
		jne    jump_ed22a
		xor    %eax,%eax
		mov    0x2(%esi),%al
		cmp    $0x43,%eax
		jne    jump_ed22a
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%esi),%al
		mov    0x5(%esi),%dl
		shl    $0x8,%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x6(%esi),%dl
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x7(%esi),%dl
		add    %edx,%eax
		mov    BfMusic,%edx
		lea    -0x8(%eax),%ebx
		add    $0x8,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    %esi,%edx
		mov    %esi,%eax
		call   ac_UnpackM1
		jmp    jump_ed24a
	jump_ed22a:
		xor    %ebx,%ebx
		mov    0x40(%esp),%bl
		mov    BfMusic,%edx
		shl    $0x4,%ebx
		mov    %ecx,%eax
		mov    0x8(%esp,%ebx,1),%ebx
		add    $0x8,%edx
		sub    $0x8,%ebx
		call   ac_LbFileRead
	jump_ed24a:
		call   format_music
		mov    $0x1,%bl
		jmp    jump_ed275
	jump_ed253:
		mov    %eax,%edx
		mov    BfMusic,%eax
		shl    $0x5,%edx
		push   $0x0
		mov    0x12(%edx,%eax,1),%edi
		push   %edi
		mov    SongHandle,%ebp
		push   %ebp
		inc    %bl
		call   ac_AIL_init_sequence
		add    $0xc,%esp
	jump_ed275:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(NumberOfSongs),%dx
		mov    %bl,%al
		cmp    %edx,%eax
		jle    jump_ed253
		mov    $0x1,%ah
		mov    %ah,EXPORT_SYMBOL(MusicAble)
		mov    %ah,%al
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_ed299:
		xor    %al,%al
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AllocateMusicBankMemory)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		push   $SoundDataPath
		push   $aSMusic_dat
		push   $full_music_data_path
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x2,%edx
		mov    $full_music_data_path,%eax
		call   ac_LbFileOpen
		mov    %eax,%ecx
		cmp    $0xffffffff,%eax
		jne    jump_ed32c
		jmp    jump_ed45d
	jump_ed2e8:
		mov    music_bank_size_info__mbs4,%esi
		mov    music_bank_size_info__mbs5,%edi
		jmp    jump_ed3dc
	jump_ed2f9:
		mov    music_bank_size_info__mbs2,%esi
		mov    music_bank_size_info__mbs3,%edi
		jmp    jump_ed3dc
	jump_ed30a:
		mov    music_bank_size_info__mbs0,%esi
		mov    music_bank_size_info__mbs1,%edi
		jmp    jump_ed3dc
	jump_ed31b:
		mov    music_bank_size_info__mbs6,%esi
		mov    music_bank_size_info__mbs7,%edi
		jmp    jump_ed3dc
	jump_ed32c:
		mov    $0x20,%ebx
		mov    $music_bank_size_info__mbs0,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x2,%ebx
		mov    %ecx,%eax
		xor    %edx,%edx
		call   ac_LbFileSeek
		mov    %ecx,%eax
		mov    $0x2,%ebx
		call   ac_LbFilePosition
		xor    %edx,%edx
		mov    %eax,%ebp
		mov    %ecx,%eax
		call   ac_LbFileSeek
		lea    -0x24(%ebp),%edx
		mov    %ecx,%eax
		xor    %ebx,%ebx
		call   ac_LbFileSeek
		mov    $0x20,%ebx
		mov    $music_bank_size_info__mbs0,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    %ecx,%eax
		xor    %edi,%edi
		call   ac_LbFileClose
		mov    EXPORT_SYMBOL(MusicType),%cl
		xor    %esi,%esi
		cmp    $0x57,%cl
		jb     jump_ed3bd
		jbe    jump_ed31b
		cmp    $0x67,%cl
		jb     jump_ed3b8
		jbe    jump_ed2e8
		cmp    $0x72,%cl
		jb     jump_ed3dc
		jbe    jump_ed2f9
		cmp    $0x77,%cl
		je     jump_ed31b
		jmp    jump_ed3dc
	jump_ed3b8:
		cmp    $0x66,%cl
		jmp    jump_ed3d6
	jump_ed3bd:
		cmp    $0x47,%cl
		jb     jump_ed3d3
		jbe    jump_ed2e8
		cmp    $0x52,%cl
		je     jump_ed2f9
		jmp    jump_ed3dc
	jump_ed3d3:
		cmp    $0x46,%cl
	jump_ed3d6:
		je     jump_ed30a
	jump_ed3dc:
		test   %esi,%esi
		je     jump_ed458
		test   %edi,%edi
		je     jump_ed458
		lea    0x100(%esi),%eax
		call   ac_LbMemoryAlloc
		mov    %eax,BfMusicData
		lea    0x100(%edi),%eax
		call   ac_LbMemoryAlloc
		mov    BfMusicData,%edx
		mov    %eax,BfMusic
		test   %edx,%edx
		je     jump_ed416
		test   %eax,%eax
		jne    jump_ed433
	jump_ed416:
		mov    BfMusicData,%eax
		call   ac_LbMemoryFree
		mov    BfMusic,%eax
		call   ac_LbMemoryFree
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ed433:
		mov    %edx,%eax
		mov    %esi,%ebx
		xor    %edx,%edx
		call   ac_memset
		mov    BfMusic,%eax
		mov    %edi,%ebx
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ed458:
		mov    $0xfffffffe,%eax
	jump_ed45d:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void FreeAudio(void)
 */
GLOBAL_FUNC (ASM_FreeAudio)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(CDAble)
		je     jump_ed4c7
		call   ac_FreeCD
		call   ac_GetSoundAble
		test   %al,%al
		jne    jump_ed4c7
		call   ac_GetMusicAble
		test   %al,%al
		jne    jump_ed4c7
		call   ac_AIL_shutdown
	jump_ed4c7:
		cmpb   $0x0,EXPORT_SYMBOL(StreamedSoundAble)
		je     jump_ed4d5
		call   FreeStreamedSound_
	jump_ed4d5:
		call   FreeMusic_
		call   FreeSound_
		cmpb   $0x0,EXPORT_SYMBOL(sb16_mixer_set)
		je     jump_ed4ed
		call   ac_reset_SB16_volumes
	jump_ed4ed:
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetMusicMasterVolume)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		mov    EXPORT_SYMBOL(MusicInstalled),%ah
		test   %ah,%ah
		je     jump_ee6f3
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ee6f3
		test   %ah,%ah
		je     jump_ee6f3
		cmp    CurrentMusicMasterVolume,%ebx
		je     jump_ee6f3
		cmp    $0x7f,%ebx
		jg     jump_ee6f3
		test   %ebx,%ebx
		jl     jump_ee6f3
		push   %ebx
		mov    MusicDriver,%ecx
		push   %ecx
		call   ac_AIL_set_XMIDI_master_volume
		add    $0x8,%esp
		mov    %ebx,CurrentMusicMasterVolume
	jump_ee6f3:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetSoundMasterVolume)	/* 0xEE700 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		cmpb   $0x0,SoundAble
		je     jump_ee73e
		cmpb   $0x0,SoundInstalled
		je     jump_ee73e
		cmp    EXPORT_SYMBOL(CurrentSoundMasterVolume),%ebx
		je     jump_ee73e
		cmp    $0x7f,%ebx
		jg     jump_ee73e
		test   %ebx,%ebx
		jl     jump_ee73e
		push   %ebx
		mov    EXPORT_SYMBOL(SoundDriver),%ecx
		push   %ecx
		call   ail_set_digital_master_volume
		add    $0x8,%esp
		mov    %ebx,EXPORT_SYMBOL(CurrentSoundMasterVolume)
	jump_ee73e:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_IsSamplePlaying)	/* 0xee750 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_ee828
		cmpb   $0x0,SoundAble
		je     jump_ee828
		cmpb   $0x0,SoundActive
		je     jump_ee828
		movswl %di,%eax
		test   %eax,%eax
		jne    jump_ee7a3
		test   %esi,%esi
		jne    jump_ee7a3
		push   %ebx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee828
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7a3:
		movswl %di,%eax
		test   %eax,%eax
		jne    jump_ee7e5
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ee7c9
		jmp    jump_ee828
	jump_ee7bc:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ee828
	jump_ee7c9:
		cmp    0xe(%ebx),%esi
		jne    jump_ee7bc
		mov    (%ebx),%ebp
		push   %ebp
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee7bc
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7e5:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ee806
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7f9:
		mov    EXPORT_SYMBOL(end_sample_id),%ebp
		add    $0x19,%ebx
		cmp    %ebp,%ebx
		ja     jump_ee828
	jump_ee806:
		cmp    0xe(%ebx),%esi
		jne    jump_ee7f9
		cmp    0x12(%ebx),%di
		jne    jump_ee7f9
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee7f9
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee828:
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (DangerMusicFadeTick)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef11b
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef11b
		cmpb   $0x0,MusicActive
		je     jump_ef11b
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef11b
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ef11b
		cmpb   $0x0,data_1e5eac
		je     jump_ef06c
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ecx
		push   %ecx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef06c:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		cmp    $0x7f,%eax
		jne    jump_ef097
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%al
		cmp    $0x2,%eax
		jne    jump_ef097
		movb   $0x1,data_1e5eac
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(DangerMusicFadeActive)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef097:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		test   %eax,%eax
		jne    jump_ef0bf
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%al
		cmp    $0x1,%eax
		jne    jump_ef0bf
		movb   $0x1,data_1e5eac
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(DangerMusicFadeActive)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef0bf:
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_ef146
		mov    EXPORT_SYMBOL(DangerMusicVolumeChange),%al
		add    %al,EXPORT_SYMBOL(DangerMusicVolume)
		xor    %bl,%bl
		jmp    jump_ef0dd
	jump_ef0db:
		inc    %bl
	jump_ef0dd:
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x10,%eax
		jge    jump_ef146
		cmpb   $0x0,EXPORT_SYMBOL(data_1e5edc)(%eax)
		je     jump_ef0db
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		push   %eax
		mov    %bl,%al
		push   $0xb
		or     $0xb0,%al
		and    $0xff,%eax
		push   %eax
		mov    SongHandle,%esi
		push   %esi
		mov    MusicDriver,%edi
		push   %edi
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		jmp    jump_ef0db
	jump_ef11b:
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ebx
		push   %ebx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(DangerMusicFadeActive)
		movb   $0x1,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		mov    %bl,EXPORT_SYMBOL(DangerMusicVolume)
		movb   $0xff,EXPORT_SYMBOL(DangerMusicVolumeChange)
	jump_ef146:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (DangerMusicFadeSwitch)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %al,%bl
		mov    %dl,%bh
		cmpb   $0x0,EXPORT_SYMBOL(DisableDangerMusic)
		jne    jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicAble)
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef27c
		cmpb   $0x0,MusicActive
		je     jump_ef27c
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef27c
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ef27c
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%dl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    %eax,%edx
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_ef1eb
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ecx
		push   %ecx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
	jump_ef1eb:
		mov    %bl,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		negb   EXPORT_SYMBOL(DangerMusicVolumeChange)
		movb   $0x1,EXPORT_SYMBOL(DangerMusicFadeActive)
		mov    %bh,%bl
		and    $0xff,%ebx
		cmp    $0x4,%ebx
		jg     jump_ef248
		cmp    $0x1,%ebx
		jl     jump_ef248
		xor    %cl,%cl
		push   $DangerMusicFadeTick
		mov    %cl,data_1e5eac
		call   ac_AIL_register_timer
		mov    %eax,%edx
		mov    %eax,EXPORT_SYMBOL(DangerMusicFadeHandle)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		add    $0x4,%esp
		add    %eax,%eax
		push   %eax
		push   %edx
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%edi
		push   %edi
		jmp    jump_ef274
	jump_ef248:
		xor    %dh,%dh
		push   $DangerMusicFadeTick
		mov    %dh,data_1e5eac
		call   ac_AIL_register_timer
		add    $0x4,%esp
		push   $0x1e
		push   %eax
		mov    %eax,EXPORT_SYMBOL(DangerMusicFadeHandle)
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%esi
		push   %esi
	jump_ef274:
		call   ac_AIL_start_timer
		add    $0x4,%esp
	jump_ef27c:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetSampleTempo)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef2dd
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef2dd
		cmpb   $0x0,MusicActive
		je     jump_ef2dd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentTempo),%ax
		cmp    %ebx,%eax
		je     jump_ef2dd
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef2dd
		push   %edx
		push   %ebx
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_set_sequence_tempo
		add    $0xc,%esp
		mov    %bx,EXPORT_SYMBOL(CurrentTempo)
	jump_ef2dd:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetSampleTempoNormal)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef334
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef334
		cmpb   $0x0,MusicActive
		je     jump_ef334
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentTempo),%ax
		cmp    $0x64,%eax
		je     jump_ef334
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef334
		push   $0x0
		push   $0x64
		mov    SongHandle,%edx
		push   %edx
		mov    $0x64,%ebx
		call   ac_AIL_set_sequence_tempo
		add    $0xc,%esp
		mov    %bx,EXPORT_SYMBOL(CurrentTempo)
	jump_ef334:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_ReleaseLoopedSample)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_ef3aa
		cmpb   $0x0,SoundAble
		je     jump_ef3aa
		cmpb   $0x0,SoundActive
		je     jump_ef3aa
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ef382
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_ef375:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ef3aa
	jump_ef382:
		cmp    0xe(%ebx),%esi
		jne    jump_ef375
		cmp    0x12(%ebx),%di
		jne    jump_ef375
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ef375
		push   $0x1
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_set_sample_loop_count
		add    $0x8,%esp
	jump_ef3aa:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetSamplePitch_)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_ef451
		cmpb   $0x0,SoundAble
		je     jump_ef451
		cmpb   $0x0,SoundActive
		je     jump_ef451
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ef400
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ef3f3:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ef451
	jump_ef400:
		cmp    0xe(%ebx),%ebp
		jne    jump_ef3f3
		cmp    0x12(%ebx),%di
		jne    jump_ef3f3
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ef3f3
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_ef3f3
		xor    %edx,%edx
		mov    0x8(%ebx),%dx
		cmp    %eax,%edx
		je     jump_ef3f3
		mov    EXPORT_SYMBOL(SampleRate),%edx
		imul   %eax,%edx
		mov    $0x64,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   AIL_set_sample_playback_rate
		add    $0x8,%esp
		mov    %si,0x8(%ebx)
	jump_ef451:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_StopAllSamples)	/* 0xEE910 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpb   $0x0,SoundInstalled
		je     jump_ee970
		cmpb   $0x0,SoundAble
		je     jump_ee970
		cmpb   $0x0,SoundActive
		je     jump_ee970
		call   StopAllSampleFadeTimers_
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		ja     jump_ee96b
	jump_ee940:
		mov    (%ebx),%ecx
		push   %ecx
		add    $0x19,%ebx
		call   ac_AIL_end_sample
		movw   $0x0,-0x7(%ebx)
		add    $0x4,%esp
		movl   $0x0,-0xb(%ebx)
		movb   $0x0,-0x5(%ebx)
		movb   $0x0,-0x4(%ebx)
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ee940
	jump_ee96b:
		call   StopSampleQueueList_
	jump_ee970:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetVolume_func_ee980) /* 0xee980 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ee9dc
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ee9dc
		cmpb   $0x0,MusicActive
		je     jump_ee9dc
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ee9dc
		movzbl %dl,%esi
		cmp    $0x7f,%esi
		jg     jump_ee9dc
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ee9dc
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		push   %esi
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_set_sequence_volume
		add    $0xc,%esp
	jump_ee9dc:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
cb_get_trigger_info:	/* 0x0F0340 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x18(%esp),%ebx
		cmpl   $0x0,0x1c(%esp)
		jne    jump_f03ac
		movb   $0x1,EXPORT_SYMBOL(DangerMusicAble)
		mov    %ebx,%eax
		mov    EXPORT_SYMBOL(DisableDangerMusic),%dl
		or     $0xb0,%al
		test   %dl,%dl
		je     jump_f0389
		push   $0x7f
		push   $0x6b
		push   %eax
		mov    SongHandle,%edi
		push   %edi
		mov    MusicDriver,%ebp
		push   %ebp
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(DangerMusicAble)
		jmp    jump_f03ac
	jump_f0389:
		push   $0x0
		push   $0xb
		push   %eax
		mov    SongHandle,%ecx
		push   %ecx
		mov    MusicDriver,%esi
		push   %esi
		call   ac_AIL_send_channel_voice_message
		mov    $0x1,%dh
		add    $0x14,%esp
		mov    %dh,EXPORT_SYMBOL(data_1e5edc)(%ebx)
	jump_f03ac:
		cmpl   $0x1,0x1c(%esp)
		jne    jump_f03ef
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		push   $0x1
		push   $0x0
		or     $0xb0,%bl
		push   %ebx
		mov    SongHandle,%ebx
		push   %ebx
		mov    MusicDriver,%ecx
		push   %ecx
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		mov    SongHandle,%esi
		push   %esi
		call   ac_AIL_resume_sequence
		add    $0x4,%esp
	jump_f03ef:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_DetermineSoundType)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    $SoundProgressMessage,%ebx
	jump_ffa97:
		xor    %eax,%eax
		mov    SoundType,%ax
		push   %eax
		push   $ascBf19D
		push   %ebx
		call   ac_sprintf
		add    $0xc,%esp
		mov    %ebx,%eax
		call   ac_SoundProgressLog
		xor    %eax,%eax
		mov    SoundType,%ax
		call   AllocateSoundBankMemory_
		mov    %eax,%edx
		test   %eax,%eax
		jg     jump_ffc40
		cmp    $0xffffffff,%eax
		jne    jump_ffaf9
		push   $aNoSound_dat
		push   $SoundProgressMessage
		call   ac_sprintf
		add    $0x8,%esp
		mov    $SoundProgressMessage,%eax
		xor    %ebx,%ebx
		call   ac_SoundProgressLog
		mov    %bx,SoundType
		pop    %edx
		pop    %ebx
		ret
	jump_ffaf9:
		test   %eax,%eax
		jne    jump_ffb17
		push   $aCannotAllocate
		push   %ebx
		call   ac_sprintf
		add    $0x8,%esp
		mov    %ebx,%eax
		call   ac_SoundProgressLog
		jmp    jump_ffb35
	jump_ffb17:
		cmp    $0xfffffffe,%eax
		jne    jump_ffb35
		push   $aNotPresentInSo
		push   %ebx
		call   ac_sprintf
		add    $0x8,%esp
		mov    %ebx,%eax
		call   ac_SoundProgressLog
	jump_ffb35:
		mov    SoundType,%ax
		cmp    $0x64b,%ax
		jb     jump_ffc0e
		jbe    jump_ffba1
		cmp    $0x656,%ax
		jb     jump_ffbfd
		jbe    jump_ffb85
		cmp    $0x668,%ax
		jb     jump_ffc55
		jbe    jump_ffb77
		cmp    $0x66c,%ax
		jne    jump_ffc55
		movw   $0x668,SoundType
		jmp    jump_ffc55
	jump_ffb77:
		movw   $0x656,SoundType
		jmp    jump_ffc55
	jump_ffb85:
		movw   $0x654,SoundType
		jmp    jump_ffc55
	jump_ffb93:
		movw   $0x64b,SoundType
		jmp    jump_ffc55
	jump_ffba1:
		movw   $0x64a,SoundType
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffbb5:
		movw   $0x336,SoundType
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffbc9:
		movw   $0x32b,SoundType
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffbdd:
		movw   $0x320,SoundType
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffbf1:
		xor    %edx,%edx
		mov    %dx,SoundType
		pop    %edx
		pop    %ebx
		ret
	jump_ffbfd:
		cmp    $0x654,%ax
		je     jump_ffb93
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffc0e:
		cmp    $0x32b,%ax
		jb     jump_ffc2f
		jbe    jump_ffbdd
		cmp    $0x336,%ax
		jb     jump_ffc55
		jbe    jump_ffbc9
		cmp    $0x64a,%ax
		je     jump_ffbb5
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffc2f:
		cmp    $0x320,%ax
		je     jump_ffbf1
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret
	jump_ffc40:
		push   $aAllocationSucc
		push   %ebx
		call   ac_sprintf
		add    $0x8,%esp
		mov    %ebx,%eax
		call   ac_SoundProgressLog
	jump_ffc55:
		test   %edx,%edx
		jle    jump_ffa97
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* int fm_instrument_file_exists(char *fname)
 */
fm_instrument_file_exists:
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		call   ac_dos_access
		test   %eax,%eax
		sete   %al
		and    $0xff,%eax
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_InitAllBullfrogSoundTimers)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		jne    jump_1004d4
		cmpb   $0x0,SoundInstalled
		je     jump_1004e5
	jump_1004d4:
		mov    $0x19,%ebx
		mov    $EXPORT_SYMBOL(sound_timer),%eax
		xor    %edx,%edx
		call   ac_memset
	jump_1004e5:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_InitStreamedSound)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,SoundInstalled
		je     jump_1006ae
		cmpb   $0x0,SoundAble
		je     jump_1006ae
		cmpb   $0x0,EXPORT_SYMBOL(StreamedSoundAble)
		jne    jump_1006ae
#if 0
		call   flushall_
		mov    $data_159392,%eax
		xor    %edx,%edx
		call   ac_setbuf
#endif
		call   ac_allocate_buffers
		test   %eax,%eax
		jne    jump_10065a
		mov    $aBf100CannotAll,%esi
		mov    $SoundProgressMessage,%edi
		call   ac_free_buffers
		push   %edi
	jump_100635:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_10064d
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_100635
	jump_10064d:
		pop    %edi
		mov    %edi,%eax
		call   ac_SoundProgressLog
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret
	jump_10065a:
		mov    EXPORT_SYMBOL(SoundDriver),%edx
		push   %edx
		call   ac_AIL_allocate_sample_handle
		add    $0x4,%esp
		mov    %eax,sample_handle
		test   %eax,%eax
		jne    jump_1006a7
		mov    $aBf100CannotA_0,%esi
		mov    $SoundProgressMessage,%edi
		call   ac_free_buffers
		push   %edi
	jump_100682:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_10069a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_100682
	jump_10069a:
		pop    %edi
		mov    %edi,%eax
		call   ac_SoundProgressLog
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret
	jump_1006a7:
		movb   $0x1,EXPORT_SYMBOL(StreamedSoundAble)
	jump_1006ae:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
FreeStreamedSound_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(sample_file),%edx
		cmp    $0xffffffff,%edx
		je     jump_1006df
		mov    %edx,%eax
		mov    $0xffffffff,%ebx
		call   ac_LbFileClose
		mov    %ebx,EXPORT_SYMBOL(sample_file)
	jump_1006df:
		call   SwitchOffStreamedSound_
		call   ac_free_buffers
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(StreamedSoundAble)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
SwitchOffStreamedSound_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(StreamedSoundAble)
		je     jump_100d1b
		cmpb   $0x0,EXPORT_SYMBOL(ssnd_active)
		je     jump_100d1b
		mov    sample_handle,%edx
		push   %edx
		mov    $0x4000,%ebx
		call   ac_AIL_end_sample
		add    $0x4,%esp
		mov    EXPORT_SYMBOL(ssnd_buffer)+0,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x4000,%ebx
		mov    EXPORT_SYMBOL(ssnd_buffer)+4,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(sample_file),%ebx
		cmp    $0xffffffff,%ebx
		je     jump_100cec
		mov    %ebx,%eax
		mov    $0xffffffff,%ecx
		call   ac_LbFileClose
		mov    %ecx,EXPORT_SYMBOL(sample_file)
	jump_100cec:
		cmpl   $0x0,EXPORT_SYMBOL(adpcm_file_open)
		je     jump_100d02
		xor    %edi,%edi
		call   close_adpcm_file_
		mov    %edi,EXPORT_SYMBOL(adpcm_file_open)
	jump_100d02:
		cmpb   $0x0,EXPORT_SYMBOL(mixed_file_open)
		je     jump_100d13
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(mixed_file_open)
	jump_100d13:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(ssnd_active)
	jump_100d1b:
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_allocate_buffers)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		mov    $0x8000,%eax
		call   ac_LbMemoryAlloc
		mov    %eax,EXPORT_SYMBOL(mixer_buffer)
		test   %eax,%eax
		je     jump_100ff9
		mov    $0x800,%eax
		call   ac_LbMemoryAlloc
		mov    %eax,EXPORT_SYMBOL(adpcm_source_buffer)
		test   %eax,%eax
		je     jump_100ff9
		push   $0x4000
		call   ac_AIL_MEM_alloc_lock
		add    $0x4,%esp
		mov    %eax,EXPORT_SYMBOL(ssnd_buffer)+0
		test   %eax,%eax
		je     jump_100ff9
		push   $0x4000
		call   ac_AIL_MEM_alloc_lock
		add    $0x4,%esp
		mov    %eax,EXPORT_SYMBOL(ssnd_buffer)+4
		test   %eax,%eax
		je     jump_100ff9
		mov    $0x1,%eax
	jump_100ff9:
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_free_buffers)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %ebp
		mov    EXPORT_SYMBOL(ssnd_buffer)+0,%edx
		test   %edx,%edx
		je     jump_101025
		push   $0x4000
		push   %edx
		call   ac_AIL_MEM_free_lock
		xor    %ecx,%ecx
		add    $0x8,%esp
		mov    %ecx,EXPORT_SYMBOL(ssnd_buffer)+0
	jump_101025:
		mov    EXPORT_SYMBOL(ssnd_buffer)+4,%esi
		test   %esi,%esi
		je     jump_101045
		push   $0x4000
		push   %esi
		xor    %ebp,%ebp
		call   ac_AIL_MEM_free_lock
		add    $0x8,%esp
		mov    %ebp,EXPORT_SYMBOL(ssnd_buffer)+4
	jump_101045:
		mov    EXPORT_SYMBOL(adpcm_source_buffer),%eax
		test   %eax,%eax
		je     jump_10105b
		xor    %edx,%edx
		call   ac_LbMemoryFree
		mov    %edx,EXPORT_SYMBOL(adpcm_source_buffer)
	jump_10105b:
		mov    EXPORT_SYMBOL(mixer_buffer),%ebx
		test   %ebx,%ebx
		je     jump_101074
		mov    %ebx,%eax
		xor    %ecx,%ecx
		call   ac_LbMemoryFree
		mov    %ecx,EXPORT_SYMBOL(mixer_buffer)
	jump_101074:
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_StopMusic)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_108c5a
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_108c5a
		cmpb   $0x0,MusicActive
		je     jump_108c5a
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_108c5a
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_108bfd
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%edx
		push   %edx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
	jump_108bfd:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(DangerMusicAble)
		mov    %bh,EXPORT_SYMBOL(DangerMusicFadeActive)
		movb   $0x1,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		mov    %bh,EXPORT_SYMBOL(DangerMusicVolume)
		movb   $0xff,EXPORT_SYMBOL(DangerMusicVolumeChange)
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_108c51
		mov    SongHandle,%ecx
		push   %ecx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		mov    SongHandle,%esi
		push   %esi
		call   ac_AIL_end_sequence
		add    $0x4,%esp
	jump_108c51:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(SongCurrentlyPlaying)
	jump_108c5a:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
FreeMusic_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_108d00
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_108ca3
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_end_sequence
		xor    %ebx,%ebx
		add    $0x4,%esp
		mov    %bx,EXPORT_SYMBOL(SongCurrentlyPlaying)
	jump_108ca3:
		xor    %eax,%eax
		mov    Awe32SoundfontLoaded,%al
		cmp    $0x1,%eax
		jne    jump_108cb4
		call   ac_FreeAwe32Soundfont
	jump_108cb4:
		cmpb   $0x0,SoundInstalled
		jne    jump_108cc2
		call   ac_AIL_shutdown
	jump_108cc2:
		mov    BfMusic,%ecx
		test   %ecx,%ecx
		je     jump_108cdb
		mov    %ecx,%eax
		xor    %esi,%esi
		call   ac_LbMemoryFree
		mov    %esi,BfEndMusic
	jump_108cdb:
		mov    BfMusicData,%edi
		test   %edi,%edi
		je     jump_108cec
		mov    %edi,%eax
		call   ac_LbMemoryFree
	jump_108cec:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(MusicAble)
		mov    %dh,MusicActive
		mov    %dh,EXPORT_SYMBOL(MusicInstalled)
	jump_108d00:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
FreeSound_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpb   $0x0,SoundInstalled
		je     jump_108d6d
		call   ac_StopAllSamples
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		jne    jump_108d2f
		call   ac_AIL_shutdown
	jump_108d2f:
		mov    EXPORT_SYMBOL(Sfx),%edx
		test   %edx,%edx
		je     jump_108d48
		mov    %edx,%eax
		xor    %ebx,%ebx
		call   ac_LbMemoryFree
		mov    %ebx,EXPORT_SYMBOL(EndSfxs)
	jump_108d48:
		mov    EXPORT_SYMBOL(SfxData),%ecx
		test   %ecx,%ecx
		je     jump_108d59
		mov    %ecx,%eax
		call   ac_LbMemoryFree
	jump_108d59:
		xor    %dh,%dh
		mov    %dh,SoundAble
		mov    %dh,SoundActive
		mov    %dh,SoundInstalled
	jump_108d6d:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetSampleVolume_)	/* 0xf0a20 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_f0aaa
		cmpb   $0x0,SoundAble
		je     jump_f0aaa
		cmpb   $0x0,SoundActive
		je     jump_f0aaa
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f0a6c
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_f0a5f:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f0aaa
	jump_f0a6c:
		cmp    0xe(%ebx),%ebp
		jne    jump_f0a5f
		cmp    0x12(%ebx),%di
		jne    jump_f0a5f
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_f0a5f
		movswl %si,%eax
		test   %eax,%eax
		jl     jump_f0a5f
		cmp    $0x7f,%eax
		jg     jump_f0a5f
		cmp    0x4(%ebx),%eax
		je     jump_f0a5f
		push   %eax
		mov    (%ebx),%edi
		push   %edi
		call   AIL_set_sample_volume
		add    $0x8,%esp
		movswl %si,%eax
		mov    %eax,0x4(%ebx)
	jump_f0aaa:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (SetSamplePan_)	/* 0xF0AB0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%edi
		mov    %edx,(%esp)
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_f0b31
		cmpb   $0x0,SoundAble
		je     jump_f0b31
		cmpb   $0x0,SoundActive
		je     jump_f0b31
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f0af8
		jmp    jump_f0b31
	jump_f0aeb:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f0b31
	jump_f0af8:
		cmp    0xe(%ebx),%edi
		jne    jump_f0aeb
		mov    (%esp),%edx
		cmp    0x12(%ebx),%dx
		jne    jump_f0aeb
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_f0aeb
		cmp    0xa(%ebx),%si
		je     jump_f0aeb
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		mov    (%ebx),%edx
		push   %edx
		call   AIL_set_sample_pan
		add    $0x8,%esp
		mov    %si,0xa(%ebx)
	jump_f0b31:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (StopSample_)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_f1788
		cmpb   $0x0,SoundAble
		je     jump_f1788
		cmpb   $0x0,SoundActive
		je     jump_f1788
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f1762
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_f1755:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1788
	jump_f1762:
		cmp    0xe(%ebx),%esi
		jne    jump_f1755
		cmp    0x12(%ebx),%di
		jne    jump_f1755
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_f1755
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_end_sample
		add    $0x4,%esp
	jump_f1788:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (PlaySampleFromAddress_)
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,0x4(%esp)
		mov    %ecx,(%esp)
		mov    0x24(%esp),%al
		cmpb   $0x0,SoundInstalled
		je     jump_f17cc
		cmpb   $0x0,SoundAble
		je     jump_f17cc
		cmpb   $0x0,SoundActive
		jne    jump_f1918
	jump_f17cc:
		xor    %eax,%eax
	jump_f17ce:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_f17d7:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%eax
		xor    %ebp,%ebp
		cmp    %ebx,%eax
		jae    jump_f17fd
		jmp    jump_f1934
	jump_f17ec:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1934
	jump_f17fd:
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f17ec
		xor    %edx,%edx
		mov    %ebx,%ebp
		mov    %edx,0x8(%esp)
		jmp    jump_f1934
	jump_f181a:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		mov    %ebx,0x8(%esp)
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    %ebx,%ecx
		jae    jump_f183e
		jmp    jump_f185d
	jump_f1831:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f185d
	jump_f183e:
		cmp    0xe(%ebx),%esi
		jne    jump_f1831
		cmp    0x12(%ebx),%di
		jne    jump_f1831
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_f1831
		mov    %ebx,0x8(%esp)
	jump_f185d:
		cmpl   $0x0,0x8(%esp)
		jne    jump_f1934
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		xor    %ebp,%ebp
		cmp    %ebx,%ecx
		jae    jump_f188e
		jmp    jump_f1934
	jump_f187e:
		mov    EXPORT_SYMBOL(end_sample_id),%eax
		add    $0x19,%ebx
		cmp    %eax,%ebx
		ja     jump_f1934
	jump_f188e:
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f187e
		mov    %ebx,%ebp
		jmp    jump_f1934
	jump_f18a5:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		xor    %al,%al
		cmp    %ebx,%edx
		jae    jump_f18c5
		jmp    jump_f18da
	jump_f18b8:
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		add    $0x19,%ebx
		cmp    %edx,%ebx
		ja     jump_f18da
	jump_f18c5:
		cmp    0xe(%ebx),%esi
		jne    jump_f18b8
		cmp    0x12(%ebx),%di
		jne    jump_f18b8
		xor    %eax,%eax
		mov    %ebx,%ebp
		mov    %eax,0x8(%esp)
		mov    $0x1,%al
	jump_f18da:
		test   %al,%al
		jne    jump_f1934
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		xor    %ebp,%ebp
		cmp    %ebx,%edx
		jae    jump_f18fe
		jmp    jump_f1934
	jump_f18f1:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1934
	jump_f18fe:
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f18f1
		xor    %edx,%edx
		mov    %ebx,%ebp
		mov    %edx,0x8(%esp)
		jmp    jump_f1934
	jump_f1918:
		cmp    $0x2,%al
		jb     jump_f192c
		jbe    jump_f181a
		cmp    $0x3,%al
		je     jump_f18a5
		jmp    jump_f1934
	jump_f192c:
		cmp    $0x1,%al
		je     jump_f17d7
	jump_f1934:
		test   %ebp,%ebp
		je     jump_f17cc
		cmpl   $0x0,0x8(%esp)
		jne    jump_f17cc
		mov    0x0(%ebp),%ecx
		push   %ecx
		call   ac_AIL_init_sample
		add    $0x4,%esp
		mov    0x28(%esp),%eax
		test   %eax,%eax
		je     jump_f17ce
		push   $0x1
		push   %eax
		mov    0x0(%ebp),%ebx
		push   %ebx
		call   ac_AIL_set_sample_file
		add    $0xc,%esp
		mov    0x4(%esp),%ecx
		push   %ecx
		mov    0x0(%ebp),%eax
		push   %eax
		call   AIL_set_sample_volume
		mov    StereoSound,%bl
		add    $0x8,%esp
		test   %bl,%bl
		je     jump_f1999
		mov    (%esp),%edx
		push   %edx
		mov    0x0(%ebp),%ebx
		push   %ebx
		call   AIL_set_sample_pan
		add    $0x8,%esp
	jump_f1999:
		movsbl 0x20(%esp),%eax
		inc    %eax
		push   %eax
		mov    0x0(%ebp),%ecx
		push   %ecx
		call   ac_AIL_set_sample_loop_count
		add    $0x8,%esp
		mov    0x0(%ebp),%eax
		push   %eax
		call   AIL_start_sample
		mov    %esi,0xe(%ebp)
		add    $0x4,%esp
		mov    %di,0x12(%ebp)
		mov    0x4(%esp),%eax
		mov    %eax,0x4(%ebp)
		mov    (%esp),%eax
		mov    %ax,0xa(%ebp)
		mov    0x1c(%esp),%eax
		mov    %ax,0x8(%ebp)
		movb   $0x0,0x14(%ebp)
		movb   $0x0,0x15(%ebp)
		mov    %ebp,%eax
		movb   $0x0,0x17(%ebp)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
AWEGetTotalRAM_:
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		sub    $0xc,%esp
		mov    %esp,%ecx
		push   %ecx
		mov    $0x10,%edx
		push   %ecx
		mov    %dx,0xc(%esp)
		push   $0x506
		mov    (%eax),%edx
		push   %edx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
		test   %eax,%eax
		jne    jump_10ffec
		movswl 0x8(%esp),%ecx
		movswl 0x6(%esp),%eax
		add    $0x10,%ecx
		shl    %cl,%eax
		jmp    jump_10fff1
	jump_10ffec:
		mov    $0xffffffff,%eax
	jump_10fff1:
		add    $0xc,%esp
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
AWEDefMemMap_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_110042
		cmpw   $0x0,awe_data_seg
		jne    jump_110042
		mov    $0x4,%eax
		call   AllocDOSmem_
		mov    %dx,awe_data_seg
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_110042
		test   %dx,%dx
		jne    jump_110042
		mov    $0xffffffff,%eax
		jmp    jump_1100a7
	jump_110042:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_seg,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x11,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_1100a7:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWEGetSFInfo_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_1100ef
		cmpw   $0x0,awe_data_seg
		jne    jump_1100ef
		mov    $0x4,%eax
		call   AllocDOSmem_
		mov    %dx,awe_data_seg
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_1100ef
		test   %dx,%dx
		je     jump_11016d
	jump_1100ef:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_seg,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x17,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
		test   %eax,%eax
		jne    jump_11016d
		movswl 0x6(%esp),%eax
		movswl 0x8(%esp),%ebx
		call   CreateSelector_
		mov    %eax,%edx
		mov    %ebx,%eax
		jmp    jump_110171
	jump_11016d:
		xor    %edx,%edx
		xor    %eax,%eax
	jump_110171:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWEStreamSample_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_1101c2
		cmpw   $0x0,awe_data_seg
		jne    jump_1101c2
		mov    $0x4,%eax
		call   AllocDOSmem_
		mov    %dx,awe_data_seg
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_1101c2
		test   %dx,%dx
		jne    jump_1101c2
		mov    $0xffffffff,%eax
		jmp    jump_110227
	jump_1101c2:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_seg,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x18,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_110227:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWELoadPreset_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_110272
		cmpw   $0x0,awe_data_seg
		jne    jump_110272
		mov    $0x4,%eax
		call   AllocDOSmem_
		mov    %dx,awe_data_seg
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_110272
		test   %dx,%dx
		jne    jump_110272
		mov    $0xffffffff,%eax
		jmp    jump_1102d7
	jump_110272:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_seg,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x19,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_1102d7:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_AWEFreeMem)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		sub    $0xc,%esp
		mov    %eax,%ebx
		mov    %edx,%ecx
		mov    awe_data_seg,%dx
		mov    awe_data,%eax
		call   ac_FreeDOSmem
		mov    %esp,%eax
		mov    $0x12,%esi
		push   %eax
		mov    %si,0x8(%esp)
		xor    %edx,%edx
		push   %eax
		mov    %cx,0xe(%esp)
		mov    %dx,awe_data_seg
		push   $0x506
		mov    (%ebx),%ecx
		xor    %edx,%edx
		push   %ecx
		mov    %edx,awe_data
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
		add    $0xc,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_LoadAwe32Soundfont)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x1c,%esp
		mov    %eax,%esi
		cmpb   $0x0,UseCurrentAwe32Soundfont
		je     jump_11035f
		movb   $0x1,Awe32SoundfontLoaded
		jmp    jump_1105d0
	jump_11035f:
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_1105d0
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_1105d0
		mov    $aSbawe32_mdi_0,%edx
		mov    $MusicInstallChoice_str2,%eax
		call   ac_stricmp
		test   %eax,%eax
		jne    jump_1105d0
		mov    $ascW_2,%edx
		mov    $EXPORT_SYMBOL(MusicType),%eax
		call   ac_stricmp
		test   %eax,%eax
		jne    jump_1105d0
		mov    Awe32SoundfontLoaded,%al
		cmp    $0x1,%eax
		jne    jump_1103be
		xor    %bl,%bl
		call   ac_FreeAwe32Soundfont
		mov    %bl,Awe32SoundfontLoaded
	jump_1103be:
		mov    $EXPORT_SYMBOL(CurrentAwe32SoundfontPrefix),%edi
		push   %edi
	jump_1103c4:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_1103dc
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_1103c4
	jump_1103dc:
		pop    %edi
		push   %edi
		push   $SoundDataPath
		push   $ascSS_sbk
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,EXPORT_SYMBOL(sbkHandle)
		cmp    $0xffffffff,%eax
		je     jump_1105d0
		call   ac_LbFileLengthHandle
		mov    %eax,%esi
		mov    $0x200,%eax
		call   AllocDOSmem_
		mov    %dx,awe_buffer_seg
		mov    %eax,awe_buffer
		test   %eax,%eax
		jne    jump_110439
		test   %dx,%dx
		je     jump_1105d0
	jump_110439:
		mov    MusicDriver,%eax
		call   AWEGetTotalRAM_
		cmp    $0xffffffff,%eax
		je     jump_1105d0
		lgs    awe_buffer,%ebx
		mov    $0x2,%edx
		mov    MusicDriver,%eax
		movl   $0x0,%gs:(%ebx)
		mov    %gs,%ecx
		mov    %esi,%gs:0x4(%ebx)
		call   AWEDefMemMap_
		test   %eax,%eax
		jne    jump_1105d0
		lea    0x14(%esp),%eax
		mov    $0x200,%edx
		mov    awe_buffer_seg,%cx
		push   %eax
		mov    awe_buffer,%ebx
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		call   ___dos_read_
		test   %eax,%eax
		jne    jump_1105d0
		mov    $0x1,%edx
		mov    awe_buffer_seg,%cx
		mov    awe_buffer,%ebx
		mov    MusicDriver,%eax
		call   AWEGetSFInfo_
		mov    %edx,0x18(%esp)
		mov    %eax,%edi
		test   %eax,%eax
		jne    jump_1104cf
		test   %dx,%dx
		je     jump_1105d0
	jump_1104cf:
		mov    %edx,%gs
		xor    %ebx,%ebx
		mov    %gs:0x2(%eax),%edx
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		xor    %esi,%esi
		call   ac_dos_lseek
		jmp    jump_1104e6
	jump_1104e5:
		inc    %esi
	jump_1104e6:
		mov    0x18(%esp),%gs
		movswl %gs:(%edi),%eax
		cmp    %eax,%esi
		jge    jump_110544
		lea    0x14(%esp),%eax
		mov    $0x200,%edx
		mov    awe_buffer_seg,%cx
		push   %eax
		mov    awe_buffer,%ebx
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		call   ___dos_read_
		test   %eax,%eax
		jne    jump_1105d0
		mov    $0x1,%edx
		mov    awe_buffer_seg,%cx
		mov    awe_buffer,%ebx
		mov    MusicDriver,%eax
		call   AWEStreamSample_
		test   %eax,%eax
		je     jump_1104e5
		add    $0x1c,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_110544:
		mov    %gs:0xa(%edi),%eax
		call   AllocDOSmem_
		mov    %dx,awe_preset_seg
		mov    %eax,awe_preset
		test   %eax,%eax
		jne    jump_110562
		test   %dx,%dx
		je     jump_1105d0
	jump_110562:
		mov    0x18(%esp),%gs
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		mov    %gs:0x6(%edi),%edx
		call   ac_dos_lseek
		lea    0x14(%esp),%eax
		mov    0x18(%esp),%gs
		mov    awe_preset_seg,%cx
		mov    awe_preset,%ebx
		push   %eax
		mov    %gs:0xa(%edi),%edx
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		call   ___dos_read_
		test   %eax,%eax
		jne    jump_1105d0
		mov    $0x1,%edx
		mov    awe_preset_seg,%cx
		mov    awe_preset,%ebx
		mov    MusicDriver,%eax
		call   AWELoadPreset_
		test   %eax,%eax
		jne    jump_1105d0
		mov    $0x1,%cl
		mov    EXPORT_SYMBOL(sbkHandle),%eax
		mov    %cl,Awe32SoundfontLoaded
		call   ac_LbFileClose
	jump_1105d0:
		add    $0x1c,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_FreeAwe32Soundfont)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		cmpb   $0x0,UseCurrentAwe32Soundfont
		jne    jump_110660
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_110660
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_110660
		mov    $aSbawe32_mdi_1,%edx
		mov    $MusicInstallChoice_str2,%eax
		call   ac_stricmp
		test   %eax,%eax
		jne    jump_110660
		mov    $data_16181c,%edx
		mov    $EXPORT_SYMBOL(MusicType),%eax
		call   ac_stricmp
		test   %eax,%eax
		jne    jump_110660
		mov    $0x1,%edx
		mov    MusicDriver,%eax
		call   ac_AWEFreeMem
		mov    awe_buffer_seg,%dx
		mov    awe_buffer,%eax
		call   ac_FreeDOSmem
		mov    awe_preset_seg,%dx
		mov    awe_preset,%eax
		xor    %bl,%bl
		call   ac_FreeDOSmem
		mov    %bl,Awe32SoundfontLoaded
	jump_110660:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void cbfadesample(unsigned long)
 */
cbfadesample:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %ebp
		sub    $0x4,%esp
		cmpb   $0x0,SoundInstalled
		je     jump_10939c
		cmpb   $0x0,SoundAble
		je     jump_10939c
		cmpb   $0x0,SoundActive
		je     jump_10939c
		mov    EXPORT_SYMBOL(switch_off_sample_fade_timer),%cl
		test   %cl,%cl
		je     jump_1091bb
		mov    EXPORT_SYMBOL(sample_fade_handle),%esi
		push   %esi
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		jmp    jump_1093cb
	jump_1091bb:
		mov    %cl,a_sample_is_fading
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_109375
	jump_1091d2:
		xor    %eax,%eax
		mov    a_sample_is_fading,%al
		test   %eax,%eax
		jne    jump_1093cb
		movb   $0x1,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(samples_currently_fading)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ebx
		ret
	jump_1091f7:
		movb   $0x1,a_sample_is_fading
		mov    (%ebx),%esi
		push   %esi
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_1092bd
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    $0x7f,%eax
		jle    jump_109223
		movw   $0x7f,0xc(%ebx)
	jump_109223:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jg     jump_109247
		movb   $0x0,0x14(%ebx)
		cmpb   $0x0,0x15(%ebx)
		je     jump_109247
		mov    (%ebx),%ebp
		push   %ebp
		call   ac_AIL_end_sample
		add    $0x4,%esp
		movb   $0x0,0x15(%ebx)
	jump_109247:
		xor    %eax,%eax
		mov    0x14(%ebx),%al
		cmp    $0x1,%eax
		jne    jump_10938a
		movb   $0x1,(%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		jbe    jump_109271
		jmp    jump_1092a9
	jump_109263:
		mov    (%esp),%al
		incb   (%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		ja     jump_1092a9
	jump_109271:
		incl   0x4(%ebx)
		cmpl   $0x7f,0x4(%ebx)
		jl     jump_109295
		movl   $0x7f,0x4(%ebx)
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109295:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jg     jump_109263
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		mov    %eax,0x4(%ebx)
	jump_1092a9:
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_1092bd:
		movb   $0x0,0x14(%ebx)
		movb   $0x0,0x15(%ebx)
		jmp    jump_10938a
	jump_1092ca:
		movb   $0x1,a_sample_is_fading
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_1092bd
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jl     jump_109305
		movb   $0x0,0x14(%ebx)
		cmpb   $0x0,0x15(%ebx)
		je     jump_109305
		mov    (%ebx),%ecx
		push   %ecx
		call   ac_AIL_end_sample
		add    $0x4,%esp
		movb   $0x0,0x15(%ebx)
	jump_109305:
		xor    %eax,%eax
		mov    0x14(%ebx),%al
		cmp    $0x2,%eax
		jne    jump_10938a
		movb   $0x1,(%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		jbe    jump_10932f
		jmp    jump_109364
	jump_109321:
		mov    (%esp),%al
		incb   (%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		ja     jump_109364
	jump_10932f:
		decl   0x4(%ebx)
		cmpl   $0x0,0x4(%ebx)
		jg     jump_109350
		movl   $0x0,0x4(%ebx)
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%esi
		push   %esi
		call   AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109350:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jl     jump_109321
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		mov    %eax,0x4(%ebx)
	jump_109364:
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%esi
		push   %esi
		call   AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109375:
		mov    0x14(%ebx),%al
		cmp    $0x1,%al
		jb     jump_10938a
		jbe    jump_1091f7
		cmp    $0x2,%al
		je     jump_1092ca
	jump_10938a:
		mov    EXPORT_SYMBOL(end_sample_id),%ebp
		add    $0x19,%ebx
		cmp    %ebp,%ebx
		jbe    jump_109375
		jmp    jump_1091d2
	jump_10939c:
		movb   $0x1,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(samples_currently_fading)
		mov    $EXPORT_SYMBOL(sample_id),%eax
		cmp    EXPORT_SYMBOL(end_sample_id),%eax
		ja     jump_1093cb
		xor    %bl,%bl
	jump_1093ba:
		add    $0x19,%eax
		mov    %bl,-0x5(%eax)
		mov    %bl,-0x4(%eax)
		cmp    EXPORT_SYMBOL(end_sample_id),%eax
		jbe    jump_1093ba
	jump_1093cb:
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ebx
		ret


/* Part of FadeSample_ (0x1093F0) func, which was removed. No real reason to keep this. */
vtable_1093d4:
		.long   func_1094c9
		.long   func_1094cf
		.long   func_1094d5
		.long   func_1094db
		.long   func_1094e1


/*----------------------------------------------------------------*/
func_1094c9:
		movb   $0x1,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094cf:
		movb   $0x2,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094d5:
		movb   $0x3,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094db:
		movb   $0x4,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094e1:
		movb   $0x5,0x16(%ebx)
	jump_1094e5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(samples_currently_fading),%al
		test   %eax,%eax
		jne    jump_10952c
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		mov    $0x1,%bh
		push   $cbfadesample
		mov    %bh,EXPORT_SYMBOL(samples_currently_fading)
		call   ac_AIL_register_timer
		add    $0x4,%esp
		push   $0x14
		push   %eax
		mov    %eax,EXPORT_SYMBOL(sample_fade_handle)
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(sample_fade_handle),%esi
		push   %esi
		call   ac_AIL_start_timer
		add    $0x4,%esp
	jump_10952c:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
StopAllSampleFadeTimers_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    EXPORT_SYMBOL(end_sample_id),%ebx
		cmpb   $0x0,EXPORT_SYMBOL(samples_currently_fading)
		je     jump_10958e
		movb   $0x1,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		mov    EXPORT_SYMBOL(sample_fade_handle),%edx
		push   %edx
		call   ac_AIL_release_timer_handle
		mov    EXPORT_SYMBOL(end_sample_id),%ebx
		add    $0x4,%esp
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(samples_currently_fading)
		mov    $EXPORT_SYMBOL(sample_id),%eax
		cmp    %eax,%ebx
		jb     jump_10958e
	jump_10957f:
		add    $0x19,%eax
		movb   $0x0,-0x5(%eax)
		movb   $0x0,-0x4(%eax)
		cmp    %ebx,%eax
		jbe    jump_10957f
	jump_10958e:
		mov    %ebx,EXPORT_SYMBOL(end_sample_id)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void cb_sample_queue_callback(_SAMPLE *sample)
 */
cb_sample_queue_callback:	/* 0x1095A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpb   $0x0,EXPORT_SYMBOL(sample_queue_handle_stopped)
		jne    jump_10964f
		mov    current_sample_queue_count,%eax
		push   %eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		push   %edx
		call   ail_func_104d20
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_10964f
		cmpl   $0x8,current_sample_queue_count
		jae    jump_10964f
		mov    EXPORT_SYMBOL(sample_queue_handle),%ecx
		push   %ecx
		call   ac_AIL_init_sample
		add    $0x4,%esp
		push   $cb_sample_queue_callback
		mov    EXPORT_SYMBOL(sample_queue_handle),%esi
		push   %esi
		call   ac_AIL_register_EOS_callback
		add    $0x8,%esp
		push   $0x1
		mov    current_sample_queue_count,%eax
		push   %eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edi
		push   %edi
		call   ail_func_104d20
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(Sfx),%eax
		shl    $0x5,%edx
		add    $0x8,%esp
		mov    0x12(%edx,%eax,1),%ebp
		push   %ebp
		mov    EXPORT_SYMBOL(sample_queue_handle),%eax
		push   %eax
		call   ac_AIL_set_sample_file
		add    $0xc,%esp
		mov    current_sample_queue_count,%eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		mov    current_sample_queue_count,%ebx
		inc    %ebx
		push   %edx
		mov    %ebx,current_sample_queue_count
		call   AIL_start_sample
		add    $0x4,%esp
	jump_10964f:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
StopSampleQueueList_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		cmpb   $0x0,EXPORT_SYMBOL(sample_queue_handle_initiated)
		je     jump_109862
		mov    $0x1,%dl
		push   $0x0
		mov    %dl,EXPORT_SYMBOL(sample_queue_handle_stopped)
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		push   %edx
		call   ac_AIL_register_EOS_callback
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(sample_queue_handle),%ebx
		push   %ebx
		call   ac_AIL_end_sample
		add    $0x4,%esp
		push   $0x0
		push   $0x0
		mov    EXPORT_SYMBOL(sample_queue_handle),%ecx
		push   %ecx
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x1
		mov    EXPORT_SYMBOL(sample_queue_handle),%esi
		push   %esi
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x2
		mov    EXPORT_SYMBOL(sample_queue_handle),%edi
		push   %edi
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x3
		mov    EXPORT_SYMBOL(sample_queue_handle),%ebp
		push   %ebp
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x4
		mov    EXPORT_SYMBOL(sample_queue_handle),%eax
		push   %eax
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x5
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		push   %edx
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x6
		mov    EXPORT_SYMBOL(sample_queue_handle),%ebx
		push   %ebx
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
		push   $0x0
		push   $0x7
		mov    EXPORT_SYMBOL(sample_queue_handle),%ecx
		push   %ecx
		call   ac_AIL_set_sample_user_data
		add    $0xc,%esp
	jump_109862:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
close_adpcm_file_:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(adpcm_handle),%edx
		cmp    $0xffffffff,%edx
		je     jump_1109ff
		mov    %edx,%eax
		mov    $0xffffffff,%ebx
		call   ac_LbFileClose
		mov    %ebx,EXPORT_SYMBOL(adpcm_handle)
	jump_1109ff:
		pop    %edx
		pop    %ebx
		ret


.section .rodata

/* unsigned char sample_queue_handle_stopped
 */
GLOBAL (sample_queue_handle_stopped)	/* 0x15958c */
		.byte	0x1
		.align	4

ascD_19:	/* 0x15ED3C */
		.string "%d"
aDebug_bf_audio:	/* 0x15ED40 */
		.string "DEBUG_BF_AUDIO"
aSoundDig_ini:	/* 0x15ED4F */
		.string "sound/DIG.INI"
aSoundMdi_ini:	/* 0x15ED5D */
		.string "sound/MDI.INI"
aSound_2:	/* 0x15ED6B */
		.string "sound"
aSound_3:	/* 0x15ED71 */
		.string "sound"
aSDig_ini:	/* 0x15ED77 */
		.string "%s/DIG.INI"
aSMdi_ini:	/* 0x15ED82 */
		.string "%s/MDI.INI"
aBf1MaD:	/* 0x15ED8D */
		.string "BF1  - MA   %d\n"
aBf2SaD:	/* 0x15ED9D */
		.string "BF2  - SA   %d\n"
aBf54MaD:	/* 0x15EDAD */
		.string "BF54 - MA   %d\n"
aBf55SaD:	/* 0x15EDBD */
		.string "BF55 - SA   %d\n"
aBf56MusicDrive:	/* 0x15EDCD */
		.string "BF56 - music driver = %s\n"
aBf57SoundDrive:	/* 0x15EDE7 */
		.string "BF57 - sound driver = %s\n"
		.align	4
aBf42LoadSoundB:	/* 0x15EE04 */
		.string "BF42 - load sound bank %d\n"
aBf43LoadSoundB:	/* 0x15EE1F */
		.string "BF43 - load sound bank - failed - bank not found\n"
aBf44LoadSoundB:	/* 0x15EE51 */
		.string "BF44 - load sound bank - failed - cannot allocate\n"
aBf45LoadSoundB:	/* 0x15EE84 */
		.string "BF45 - load sound bank - passed\n"
aBf46LoadSoundB:	/* 0x15EEA5 */
		.string "BF46 - load sound bank - failed - no sound.dat\n"
aBf47LoadSoundB:	/* 0x15EED5 */
		.string "BF47 - load sound bank - failed - Sound not installed\n"
aBf47LoadSoun_0:	/* 0x15EF0C */
		.string "BF47 - load sound bank - failed - SoundAble = 0\n"
aBf47LoadSoun_1:	/* 0x15EF3D */
		.string "BF47 - load sound bank - failed - LoadSounds disabled\n"
aBf47LoadSoun_2:	/* 0x15EF74 */
		.string "BF47 - load sound bank - failed - already loaded\n"
aSSound_dat:	/* 0x15EFA6 */
		.string "%s/SOUND.DAT"
aSoundDataSizeD:	/* 0x15EFB3 */
		.string "  Sound Data size = %d  "
aBf48LoadMusicB:	/* 0x15EFCC */
		.string "BF48 - load music bank %d\n"
aBf49LoadMusicB:	/* 0x15EFE7 */
		.string "BF49 - load music bank - failed - bank not found\n"
aBf50LoadMusicB:	/* 0x15F019 */
		.string "BF50 - load music bank - failed - cannot allocate\n"
aBf51LoadMusicB:	/* 0x15F04C */
		.string "BF51 - load music bank - passed\n"
aBf52LoadMusicB:	/* 0x15F06D */
		.string "BF52 - load music bank - failed - no music.dat\n"
aBf53LoadMusicB:	/* 0x15F09D */
		.string "BF53 - load music bank - failed - music not installed\n"
aBf53LoadMusi_0:	/* 0x15F0D4 */
		.string "BF53 - load music bank - failed - MusicAble = 0\n"
aBf53LoadMusi_1:	/* 0x15F105 */
		.string "BF53 - load music bank - failed - LoadMusic Disabled = 0\n"
aSMusic_dat:	/* 0x15F13F */
		.string "%s/MUSIC.DAT"

aBf3InitSound:	/* 0x15F804 */
		.string "BF3  - Init sound\n"
aBf4DefaultSoun:	/* 0x15F817 */
		.string "BF4  - Default sound type -  %d\n"
aBf5NoSamplesRe:	/* 0x15F838 */
		.string "BF5  - No samples requested - AIL shutdown\n"
aBf6NoSamplesRe:	/* 0x15F864 */
		.string "BF6  - No samples requested  \n"
aMdsound:	/* 0x15F883 */
		.string "MDSOUND"
aBf8MdsoundEnvi:	/* 0x15F88B */
		.string "BF8  - MDSOUND environment active\n"
ascSXDDD:	/* 0x15F8AE */
		.string "%s %x %d %d %d"
aBf9MdsoundEnvi:	/* 0x15F8BD */
		.string "BF9  - MDSOUND environment driver installation - failed\n"
aNone_0:	/* 0x15F8F6 */
		.string "none"
ascS_9:	/* 0x15F8FB */
		.string "%s"
aBf10MdsoundEnv:	/* 0x15F8FE */
		.string "BF10 - MDSOUND environment driver installation - passed\n"
aBf11SearchForD:	/* 0x15F937 */
		.string "BF11 - Search for DIG.INI - passed   \n"
ascNone_1:	/* 0x15F95E */
		.string "None"
aBf12UserReques:	/* 0x15F963 */
		.string "BF12 - user requests no sound in SETSOUND   \n"
aBf13Dig_iniDri:	/* 0x15F991 */
		.string "BF13 - DIG.INI driver installation - passed\n"
ascNone_2:	/* 0x15F9BE */
		.string "none"
aBf14Dig_iniDri:	/* 0x15F9C3 */
		.string "BF14 - DIG.INI driver installation - \n"
ascNone_3:	/* 0x15F9EA */
		.string "none"
aBf15SearchForD:	/* 0x15F9EF */
		.string "BF15 - Search for DIG.INI - failed\n"
aBf16AllDigDriv:	/* 0x15FA13 */
		.string "BF16 - all dig driver installation attempts failed\n"
aBf18DetermineS:	/* 0x15FA47 */
		.string "BF18 - determine sound type to be loaded\n"
aBf19Loadsounds:	/* 0x15FA71 */
		.string "BF19 - LoadSounds disabled\n"
aBf20CannotAllo:	/* 0x15FA8D */
		.string "BF20 - cannot allocate for digital samples\n"
ascNone_4:	/* 0x15FAB9 */
		.string "none"
aBf24InitSoundC:	/* 0x15FABE */
		.string "BF24 - Init sound completed\n"
ascBf19D:	/* 0x15FADB */
		.string "BF19 - %d"
aNoSound_dat:	/* 0x15FAE5 */
		.string " - no sound.dat\n"
aCannotAllocate:	/* 0x15FAF6 */
		.string " - cannot allocate\n"
aNotPresentInSo:	/* 0x15FB0A */
		.string " - not present in sound.dat\n"
aAllocationSucc:	/* 0x15FB27 */
		.string " - allocation successful\n"
		.align	4
aBf25InitMusic:	/* 0x15FB44 */
		.string "BF25 - Init Music\n"
aSSample:	/* 0x15FB57 */
		.string "%s/SAMPLE"
ascS_ad:	/* 0x15FB61 */
		.string "%s.ad"
aBf26Sample_adN:	/* 0x15FB67 */
		.string "BF26 - sample.ad not found\n"
ascS_opl:	/* 0x15FB83 */
		.string "%s.opl"
aBf27Sample_opl:	/* 0x15FB8A */
		.string "BF27 - sample.opl not found\n"
aMdmusic:	/* 0x15FBA7 */
		.string "MDMUSIC"
aBf29MdmusicEnv:	/* 0x15FBAF */
		.string "BF29 - MDMUSIC environment active\n"
ascSXDDD_0:	/* 0x15FBD2 */
		.string "%s %x %d %d %d"
aBf30MdmusicEnv:	/* 0x15FBE1 */
		.string "BF30 - MDMUSIC environment driver installation - failed\n"
aBf31MdmusicEnv:	/* 0x15FC1A */
		.string "BF31 - MDMUSIC environment driver installation - passed\n"
ascS_10:	/* 0x15FC53 */
		.string "%s"
aBf32SearchForM:	/* 0x15FC56 */
		.string "BF32 - Search for MDI.INI - passed\n"
ascNone_5:	/* 0x15FC7A */
		.string "None"
aBf33UserReques:	/* 0x15FC7F */
		.string "BF33 - user requests no music in SETSOUND\n"
aBf34Mdi_iniDri:	/* 0x15FCAA */
		.string "BF34 - MDI.INI driver installation - passed\n"
aBf35Mdi_iniDri:	/* 0x15FCD7 */
		.string "BF35 - MDI.INI driver installation - failed\n"
aBf36SearchForM:	/* 0x15FD04 */
		.string "BF36 - Search for MDI.INI - failed\n"
aBf37AllMusicDr:	/* 0x15FD28 */
		.string "BF37 - all music driver installation attempts failed\n"
aAdlib_mdi:	/* 0x15FD5E */
		.string "ADLIB.MDI"
ascF_0:	/* 0x15FD68 */
		.string "f"
aAdlibg_mdi:	/* 0x15FD6A */
		.string "ADLIBG.MDI"
ascF_1:	/* 0x15FD75 */
		.string "f"
aOpl3_mdi:	/* 0x15FD77 */
		.string "OPL3.MDI"
ascF_2:	/* 0x15FD80 */
		.string "f"
aPas_mdi:	/* 0x15FD82 */
		.string "PAS.MDI"
ascF_3:	/* 0x15FD8A */
		.string "f"
aPasplus_mdi:	/* 0x15FD8C */
		.string "PASPLUS.MDI"
ascF_4:	/* 0x15FD98 */
		.string "f"
aSblaster_mdi:	/* 0x15FD9A */
		.string "SBLASTER.MDI"
ascF_5:	/* 0x15FDA7 */
		.string "f"
aSbpro1_mdi:	/* 0x15FDA9 */
		.string "SBPRO1.MDI"
ascF_6:	/* 0x15FDB4 */
		.string "f"
aSbpro2_mdi:	/* 0x15FDB6 */
		.string "SBPRO2.MDI"
ascF_7:	/* 0x15FDC1 */
		.string "f"
aEsfm_mdi:	/* 0x15FDC3 */
		.string "ESFM.MDI"
ascF_8:	/* 0x15FDCC */
		.string "f"
aSbawe32_mdi:	/* 0x15FDCE */
		.string "SBAWE32.MDI"
ascW_0:	/* 0x15FDDA */
		.string "w"
ascG_4:	/* 0x15FDDC */
		.string "g"
aBf38Awe32Sound:	/* 0x15FDDE */
		.string "BF38 - awe32 soundfont not found\n"
aBf38Awe32Sou_0:	/* 0x15FE00 */
		.string "BF38 - awe32 soundfont loaded\n"
aMpu401_mdi:	/* 0x15FE1F */
		.string "MPU401.MDI"
ascG:	/* 0x15FE2A */
		.string "g"
aSndscape_mdi:	/* 0x15FE2C */
		.string "SNDSCAPE.MDI"
ascG_0:	/* 0x15FE39 */
		.string "g"
aUltra_mdi:	/* 0x15FE3B */
		.string "ULTRA.MDI"
ascG_1:	/* 0x15FE45 */
		.string "g"
aMt32mpu_mdi:	/* 0x15FE47 */
		.string "MT32MPU.MDI"
ascR:	/* 0x15FE53 */
		.string "r"
ascG_2:	/* 0x15FE55 */
		.string "g"
data_15fe57:
		.string "f"
aBf39MusicDrive:	/* 0x15FE59 */
		.string "BF39 - music driver type not supported\n"
aBf40MusicSBank:	/* 0x15FE81 */
		.string "BF40 - music%s bank allocation"
ascW:	/* 0x15FEA0 */
		.string "w"
aNotPresentInMu:	/* 0x15FEA2 */
		.string " - not present in music.dat\n"
ascG_3:	/* 0x15FEBF */
		.string "g"
aBf40aMusicSBan:	/* 0x15FEC1 */
		.string "BF40A - music%s bank allocation"
aNoMusic_dat:	/* 0x15FEE1 */
		.string " - no music.dat\n"
aCannotAlloca_0:	/* 0x15FEF2 */
		.string " - cannot allocate\n"
aNotPresentIn_0:	/* 0x15FF06 */
		.string " - not present in music.dat\n"
aAllocationSu_0:	/* 0x15FF23 */
		.string " - allocation successful\n"
aBf40LoadmusicD:	/* 0x15FF3D */
		.string "BF40 - LoadMusic Disabled\n"
aBf41InitMusicC:	/* 0x15FF58 */
		.string "BF41 - Init music completed\n"
		.align	4
aBf100CannotAll:	/* 0x15FF78 */
		.string "BF100 - Cannot allocate buffers for streamed sound\n"
aBf100CannotA_0:	/* 0x15FFAC */
		.string "BF100 - Cannot allocate handle for streamed sound\n"
aBf100UnknownSt:	/* 0x15FFDF */
		.string "BF100 - Unknown streamed sample type %d\n"
aBf101CannotOpenFile:	/* 0x160008 */
		.string "BF101 - cannot open file %s\n"
aBf101CannotOpe:	/* 0x160025 */
		.string "BF101 - cannot open file %s\n"
aBf103Oversized:	/* 0x160042 */
		.string "BF103 - oversized ADPCM chunks (%ld)\n"
aGotAdpcmBlock:	/* 0x160068 */
		.string "Got adpcm block"

aSbawe32_mdi_0:	/* 0x1617F8 */
		.string "SBAWE32.MDI"
ascW_2:	/* 0x161804 */
		.ascii  "\x77\x00"
ascSS_sbk:	/* 0x161806 */
		.string "%s/%s.sbk"
aSbawe32_mdi_1:	/* 0x161810 */
		.string "SBAWE32.MDI"
data_16181c:
		.ascii  "\x77\x00\x00\x00"

.data

GLOBAL (disk_err)
		.long	0x0

GLOBAL (MaxNumberOfSamples)	/* 0x159300 */
		.long	0x0a
GLOBAL (SoundAble)	/* 159304 */
		.byte	0x1
GLOBAL (SixteenBit)
		.byte	0x1
GLOBAL (SoundActive)
		.byte	0x1
GLOBAL (AutoScanForSoundHardware)
		.byte	0x1
GLOBAL (StereoSound)
		.byte	0x1
GLOBAL (CurrentSoundBank)
		.byte	0x0ff
		.ascii  "\x00\x00"
GLOBAL (CurrentSoundMasterVolume)
		.long	0x7f
DirectSoundUsingGameSDKWindow:
		.long	0x01
GLOBAL (CurrentMusicMasterVolume)
		.long	0x7f
GLOBAL (MusicAble)
		.byte	0x1
GLOBAL (MusicActive)
		.byte	0x1
GLOBAL (CurrentDangerMusicFadeDirection)
		.byte	0x1
GLOBAL (DangerMusicVolumeChange)
		.byte	0xff
GLOBAL (sample_file)
		.ascii  "\xff\xff\xff\xff"
sample_volume:
		.long	0x7f
GLOBAL (ssnd_active)
		.long	0x01

GLOBAL (CurrentAwe32SoundfontPrefix)
		.string "Bullfrog"
		.align	4
GLOBAL (adpcm_handle)	/* 0x159E54 */
		.ascii  "\xff\xff\xff\xff"
adaption_table:	/* 0x159E58 */
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"
		.ascii  "\x33\x01\x00\x00\x99\x01\x00\x00"
		.ascii  "\x00\x02\x00\x00\x66\x02\x00\x00"
		.ascii  "\x00\x03\x00\x00\x66\x02\x00\x00"
		.ascii  "\x00\x02\x00\x00\x99\x01\x00\x00"
		.ascii  "\x33\x01\x00\x00\xe6\x00\x00\x00"
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"

GLOBAL (FullDIG_INIPath)		/* 0x1e5a30 */
		.fill   0x90
GLOBAL (FullMDI_INIPath)		/* 0x1e5ac0 */
		.fill   0x90
GLOBAL (SoundDataPath)			/* 0x1e5b50 */
		.fill   0x90
GLOBAL (SoundDriverPath)		/* 0x1e5be0 */
		.fill   0x90

end_time:
		.long	0x0

OldInt2:	/* 0x1E5CA4 */
		.long	0x0
data_1e5ca8:
		.long	0x0
/* SoundBankSizes sound_bank_size_info;
 */
sound_bank_size_info_Bnk0Fld0:
		.long	0x0
sound_bank_size_info_Bnk0Fld1:
		.long	0x0
sound_bank_size_info_Bnk1Fld0:
		.long	0x0
sound_bank_size_info_Bnk1Fld1:
		.long	0x0
sound_bank_size_info_Bnk2Fld0:
		.long	0x0
sound_bank_size_info_Bnk2Fld1:
		.long	0x0
sound_bank_size_info_Bnk3Fld0:
		.long	0x0
sound_bank_size_info_Bnk3Fld1:
		.long	0x0
sound_bank_size_info_Bnk4Fld0:
		.long	0x0
sound_bank_size_info_Bnk4Fld1:
		.long	0x0
sound_bank_size_info_Bnk5Fld0:
		.long	0x0
sound_bank_size_info_Bnk5Fld1:
		.long	0x0
sound_bank_size_info_Bnk6Fld0:
		.long	0x0
sound_bank_size_info_Bnk6Fld1:
		.long	0x0
sound_bank_size_info_Bnk7Fld0:
		.long	0x0
sound_bank_size_info_Bnk7Fld1:
		.long	0x0
sound_bank_size_info_Bnk8Fld0:
		.long	0x0
sound_bank_size_info_Bnk8Fld1:
		.long	0x0
/* long largest_dat_size;
 */
largest_dat_size:
		.long	0x0
/* long largest_tab_size;
 */
largest_tab_size:
		.long	0x0
full_sound_data_path:
		.fill   0xe0
/* MusicBankSizes music_bank_size_info;
 */
GLOBAL (music_bank_size_info)
music_bank_size_info__mbs0:
		.long	0x0
music_bank_size_info__mbs1:
		.long	0x0
music_bank_size_info__mbs2:
		.long	0x0
music_bank_size_info__mbs3:
		.long	0x0
music_bank_size_info__mbs4:
		.long	0x0
music_bank_size_info__mbs5:
		.long	0x0
music_bank_size_info__mbs6:
		.long	0x0
music_bank_size_info__mbs7:
		.long	0x0
GLOBAL (full_music_data_path)
		.fill   0x90

GLOBAL (DebugAudio)	/* 0x1E86E0 */
		.long	0x0

GLOBAL (SoundProgressMessage)	/* 0x1E86E4 */
		.fill   0x100
/* struct SampleInfo sample_id[32] */
GLOBAL (sample_id)
		.fill   0x320
GLOBAL (end_sample_id)
		.long	0x0
GLOBAL (SoundInstalled)
		.byte	0x0
GLOBAL (DisableLoadSounds)
		.byte	0x0
GLOBAL (NumberOfSamples)
		.short  0x0
GLOBAL (Sfx)
		.long	0x0
GLOBAL (EndSfxs)
		.long	0x0
GLOBAL (SfxData)
		.long	0x0
GLOBAL (SoundType)
		.short  0x0
		.fill   0x2
GLOBAL (SoundDriver)
		.long	0x0
GLOBAL (AILStartupAlreadyInitiated)
		.byte   0x0
		.fill   0x3
GLOBAL (SampleRate)
		.long	0x0
GLOBAL (ive_got_an_sb16)
		.byte   0x0
		.fill   0x1
GLOBAL (Selected95WaveDevice)
		.short  0x0
SB16_io:
		.long	0x0
GLOBAL (UseMultiMediaExtensions)
		.byte   0x0
		.fill   0x3
GLOBAL (SoundInstallChoice)
SoundInstallChoice__Field0:
		.fill   0x80
SoundInstallChoice__Field1:
		.fill   0x80
SoundInstallChoice__Field2:
		.fill   0x18
GLOBAL (music_allocated)	/* 0x1E8C4C */
		.long	0x0
GLOBAL (UseCurrentAwe32Soundfont)
		.byte	0x0
GLOBAL (MusicInstalled)
		.byte	0x0
		.fill   0x2
GLOBAL (MusicType)
		.fill   0x6
GLOBAL (CurrentTempo)
		.short  0x0
GLOBAL (SongCurrentlyPlaying)
		.short  0x0
GLOBAL (NumberOfSongs)				/* 0x1E8C5E */
		.short  0x0
GLOBAL (BfMusic)
		.long	0x0
GLOBAL (BfEndMusic)
		.long	0x0
GLOBAL (BfMusicData)
		.long	0x0

GLOBAL (MusicDriver)		/* 0x1E8C6C */
		.long	0x0
GLOBAL (SongHandle)
		.long	0x0
GLOBAL (DangerMusicFadeHandle)
		.long	0x0
GLOBAL (Awe32SoundfontLoaded)
		.byte	0x0
GLOBAL (DisableLoadMusic)	/* 0x1E8C79 */
		.byte	0x0
ive_got_an_awe32:
		.byte	0x0
GLOBAL (DisableDangerMusic)
		.byte	0x0
GLOBAL (DangerMusicVolume)
		.byte	0x0
GLOBAL (DangerMusicFadeActive)
		.byte	0x0
GLOBAL (DangerMusicAble)			/* 0x1E8C7E */
		.fill   0x6

GLOBAL (MusicInstallChoice)	/* 0x1E8C84 */
		.fill   0x80
MusicInstallChoice_str2:	/* 0x1e8d04 */
		.fill   0x98

data_1e5eac:	/* 0x1e5eac */
		.byte	0x0
		.align	4

GLOBAL (data_1e5edc)	/* 0x1e5edc */
		.fill   0x10

/* sound_timer_inf sound_timer[];
 */
GLOBAL (sound_timer)	/* 0x1E8D9C */
		.long	0x0
data_1e8da0: /* 0x1e8da0 */
		.fill   0x15
data_1e8db5:
		.ascii  "\x00\x00\x00"
data_1e8db8:
		.fill   0x90

GLOBAL (StreamedSoundAble)	/* 0x1E8E48 */
		.byte	0x0
GLOBAL (CDSpeed)	/* 0x1E8E49 */
		.ascii  "\x00\x00\x00"
GLOBAL (sample_handle)	/* 0x1E8E4C */
		.long	0x0
sample_directory:
		.fill   0x100
sample_sign:	/* 0x1E8F50 */
		.long	0x0
sample_format:	/* 0x1E8F54 */
		.long	0x0
sample_rate:	/* 0x1E8F58 */
		.long	0x0
loop_count:	/* 0x1E8F5C */
		.long	0x0
GLOBAL (ssnd_buffer)
		.long	0x0
		.long	0x0
temp_buffer:
		.long	0x0
GLOBAL (adpcm_source_buffer)
		.long	0x0
GLOBAL (adpcm_file_open)
		.long	0x0
adpcm_source_size:
		.long	0x0
adpcm_dest_size:
		.long	0x0
stream_flags:	/* 0x1E8F7C */
		.long	0x0
block_count:	/* 0x1E8F80 */
		.long	0x0
position_offset:	/* 0x1E8F84 */
		.long	0x0
pan_position:	/* 0x1E8F88 */
		.long	0x0
pan_rate:	/* 0x1E8F8C */
		.long	0x0
pan_target:	/* 0x1E8F90 */
		.long	0x0
GLOBAL (mixer_buffer) /* 0x1e8f94 */
		.long	0x0
GLOBAL (mixed_file_open)
		.byte	0x0
		.fill   0x7

/* long sample_fade_handle;
 */
GLOBAL (sample_fade_handle)	/* 0x1E9568 */
		.long	0x0
/* unsigned char volatile switch_off_sample_fade_timer;
 */
GLOBAL (switch_off_sample_fade_timer)
		.byte	0x0
a_sample_is_fading:	/* 0x1E956D */
		.byte	0x0
/* unsigned char volatile samples_currently_fading
 */
GLOBAL (samples_currently_fading)	/* 0x2057DE */
		.byte	0x0
		.byte	0x0
/* unsigned long volatile current_sample_queue_count;
 */
current_sample_queue_count:	/* 0x2057E0 */
		.long	0x0
/* unsigned char sample_queue_handle_initiated
 */
GLOBAL (sample_queue_handle_initiated)
		.long	0x0
/* SNDSAMPLE *sample_queue_handle
 */
GLOBAL (sample_queue_handle)
		.long	0x0

GLOBAL (sbkHandle)	/* 0x1ED5F0 */
		.long	0x0

/* unsigned char *awe_buffer;
 */
GLOBAL (awe_buffer)
		.long	0x0
GLOBAL (awe_buffer_seg)
		.short	0x0
		.align	4
/* unsigned char *awe_preset;
 */
GLOBAL (awe_preset) /* 0x1ED5FC */
		.long	0x0
GLOBAL (awe_preset_seg)
		.short	0x0
		.align	4
/* struct SF_DATA *awe_data;
 */
GLOBAL (awe_data) /* 0x1ED604 */
		.long	0x0
GLOBAL (awe_data_seg)
		.short	0x0
		.align	4


