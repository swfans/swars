#!/bin/sh

show_usage()
{
  cat<<EOF >&2
Usage: $0 [OPTIONS] -f SOURCE -t TARGET

Available options:
  -f PATH  copy data from PATH (e.g. /media/cdrom)
  -t PATH  copy data to PATH (e.g. /usr/local/share/swars)

  -M       do not copy music
  -l LANG  choose language LANG

  -h       print usage information

Available languages: eng fre ger ita spa swe
EOF
}

if [ $# -eq 1 -a "x$1" = "x--help" ]; then
  show_usage
  exit 0
fi

WITH_MUSIC="yes"
OWN_TARGET="no"
SOURCE=""
TARGET=""
LANG="eng"

LEVELS_VERSION="1.0.1.25"
LEVELS_PACKAGE="swars-levels-1_0_1_25"
LEVELS_PKG_MD5="bbf821b463613993c1d53ba7017abc06"

GFX_VERSION="1.0.1.33"
GFX_PACKAGE="swars-gfx-1_0_1_33"
GFX_PKG_MD5="fddc9d1f9078442c52b5a37bad42d624"

SFX_VERSION="1.0.0.22"
SFX_PACKAGE="swars-sfx-1_0_0_22"
SFX_PKG_MD5="f222a89bfe0a2c931394c2ae25508a6d"

OPTS="f:t:Ml:h"

while getopts "$OPTS" arg; do
  case "$arg" in
    f)
      SOURCE="$OPTARG"
      ;;
    t)
      TARGET="$OPTARG"
      ;;
    M)
      WITH_MUSIC="no"
      ;;
    l)
      LANG="$OPTARG"
      ;;
    h)
      show_usage
      exit 0
      ;;
    *)
      exit 1
  esac
done

check_music_tools()
{
  if [ "$WITH_MUSIC" = "no" ]; then
    return 0
  fi

  CDPARANOIA=`which cdparanoia`
  OGGENC=`which oggenc`

  if [ -z "$CDPARANOIA" ] || [ -z "$OGGENC" ]; then
    cat<<EOF >&2
You don't have the tools needed to copy the music.  Please ensure that you
have 'cdparanoia' and 'oggenc' (from vorbis-tools) in your path or run with
-M and try again.
EOF
    return 1
  fi

  return 0
}

check_source()
{
  if [ -z "$SOURCE" ]; then
    echo "Source not specified.  Try --help." >&2
    exit 1
  fi
  if ! [ -d "$SOURCE" ]; then
    echo "$SOURCE doesn't exist!" >&2
    return 1
  fi

  if [ -d "$SOURCE/game" ]; then
    SOURCE="$SOURCE/game"
    return 0
  fi

  echo "$SOURCE does not contain the data from the game!" >&2
  return 1
}

check_target()
{
  if [ -z "$TARGET" ]; then
    echo "Target not specified.  Try --help." >&2
    exit 1
  fi

  if [ -d "$TARGET" ]; then
    local file_count=`ls "$TARGET" | wc -l | sed 's/[^0-9]//g'` || return 1

    if [ "x$file_count" != "x0" ]; then
      echo "The target directory is not empty!" >&2
      return 1
    fi
  fi

  install -v -d "$TARGET" || return 1
  OWN_TARGET="yes"

  return 0
}

dl_package()
{
  local proj_nam=$1
  local pkg_nam=$2
  local pkg_ver=$3
  local pkg_md5=$4

  local real_md5=`md5sum "${pkg_nam}.zip" | cut -d " " -f1`
  if [[ "x${real_md5}" != "x${pkg_md5}" ]]; then
    wget "https://github.com/${proj_nam}/releases/download/${pkg_ver}/${pkg_nam}.zip" || return 1
  fi

  local real_md5=`md5sum "${pkg_nam}.zip" | cut -d " " -f1`
  if [[ "x${real_md5}" != "x${pkg_md5}" ]]; then
    printf 'Downloaded package MD5 mismatch: %s\n' "$pkg_nam" >&2
    printf 'Expected md5sum: %s\n' "$pkg_md5" >&2
    return 1
  fi

  return 0
}

download_packages()
{
  dl_package "swfans/swars-levels" "${LEVELS_PACKAGE}" "${LEVELS_VERSION}" "${LEVELS_PKG_MD5}" || return 1
  dl_package "swfans/swars-gfx" "${GFX_PACKAGE}" "${GFX_VERSION}" "${GFX_PKG_MD5}" || return 1
  dl_package "swfans/swars-sfx" "${SFX_PACKAGE}" "${SFX_VERSION}" "${SFX_PKG_MD5}" || return 1

  return 0
}

copy_music()
{
  if [ "$WITH_MUSIC" = "no" ]; then
    return 0
  fi

  install -v -d "$TARGET/music" || return 1

  for track_number in 1 2 3; do
    local cd_number=$(($track_number+1))
    local track_wav="$TARGET/music/track_$track_number.wav"
    local track_ogg="$TARGET/music/track_$track_number.ogg"
    "$CDPARANOIA" "$cd_number" "$track_wav" || return 1
    "$OGGENC" -b 192 "$track_wav" || return 1
    rm -vf "$track_wav" || return 1
    chmod 0644 "$track_ogg" || return 1
  done

  return 0
}

install_file()
{
  local fname="$1"

  # Find the input file name ignoring case
  local src=`find "$SOURCE" -ipath "$SOURCE/$fname"`
  local dst="$TARGET/$fname"

  if [ ! -n "$src" ]; then
    printf 'File missing from your SOURCE: %s\n' "$fname" >&2
    return 1
  fi

  install -v -T -m 0644 "$src" "$dst" || return 1

  return 0
}

install_file_to()
{
  local fname="$1"
  local dstdir="$2"

  # Find the input file name ignoring case
  local src=`find "$SOURCE" -ipath "$SOURCE/$fname"`
  local fbase=`basename "$fname"`
  local dst="$TARGET/$dstdir/$fbase"

  if [ ! -n "$src" ]; then
    printf 'File missing from your SOURCE: %s\n' "$fname" >&2
    return 1
  fi

  install -v -T -m 0644 "$src" "$dst" || return 1

  return 0
}

install_dir()
{
  local dname="$1"

  local dst="$TARGET/$dname"

  install -v -d "$dst" || return 1

  return 0
}

copy_data()
{
  install_dir "data" || return 1

  for fn in 0-0 0-1 0-2 0-3 0-4 0-5; do
    install_file "data/font${fn}.dat" || return 1
    install_file "data/font${fn}.tab" || return 1
  done

  for fn in bgtables.dat tables.dat startgho.dat synghost.tab; do
    install_file "data/${fn}" || return 1
  done

  for fn in cities.dat mapinsid.dat mech.dat people.txt textwalk.dat; do
    install_file "data/${fn}" || return 1
  done

  for fn in icons0-0 w-icons; do
    install_file "data/${fn}.dat" || return 1
    install_file "data/${fn}.tab" || return 1
  done

  for fn in mouse-0 pointers; do
    install_file "data/${fn}.dat" || return 1
    install_file "data/${fn}.tab" || return 1
  done

  for fn in 00 01 02 03 04 05; do
    install_file "data/mapout${fn}.dat" || return 1
    install_file "data/tex${fn}.dat" || return 1
  done

  for fn in 0 1 2 3 4 5; do
    install_file "data/mspr-${fn}.dat" || return 1
    install_file "data/mspr-${fn}.tab" || return 1
    install_file "data/mspr-${fn}.inf" || return 1
  done

  for fn in s z; do
    install_file "data/outro-${fn}.smk" || return 1
    install_file "data/outro-${fn}.raw" || return 1
  done

  for fn in 0-0 0-1 0-2 1-0 2-0; do
    install_file "data/panel${fn}.dat" || return 1
    install_file "data/panel${fn}.tab" || return 1
  done

  for fn in 0-0 0-1 1-0 1-1 2-0 2-1; do
    install_file "data/pop${fn}.dat" || return 1
    install_file "data/pop${fn}.tab" || return 1
  done

  for fn in tit nam qot; do
    install_file "data/${fn}-font.dat" || return 1
    install_file "data/${fn}-font.tab" || return 1
  done

  for fn in pal s-proj; do
    install_file "data/${fn}.pal" || return 1
  done

  install_dir "data/equip" || return 1

  for fn in 00 01 02 03 04 05 06 07 08 09 10 11; do
    install_file "data/equip/mod-${fn}.fli" || return 1
    install_file "data/equip/mod-${fn}z.fli" || return 1
  done

  for fn in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30; do
    install_file "data/equip/wep-${fn}.fli" || return 1
    install_file "data/equip/wep-${fn}z.fli" || return 1
  done

  for fn in 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18; do
    install_file "data/equip/net${fn}.fli" || return 1
  done

  install_dir "qdata" || return 1

  for fn in posdefs.idx posdefs.wad primveh.obj; do
    install_file "qdata/${fn}" || return 1
  done

  for fn in 10 11 12 13; do
    install_file "qdata/demo-${fn}.fli" || return 1
  done

  for fn in flyby.fli pal.pal; do
    install_file "qdata/${fn}" || return 1
  done

  for fn in 0 1 2 3; do
    install_file "qdata/pal${fn}.dat" || return 1
  done

  for fn in s z; do
    install_file "qdata/${fn}-proj.dat" || return 1
  done

  for fn in syn_fail syn_go syn_mc zel-go zel-mc; do
    install_file "qdata/${fn}.smk" || return 1
  done

  install_dir "qdata/equip" || return 1

  for fn in bgman bgmanz; do
    install_file "qdata/equip/${fn}.dat" || return 1
  done

  for fn in m1a1 m1a2 m2a1 m2a2 m2a3 m3a1 m3a2 m3a3 z1a1 z1a2 z2a1 z2a2 z2a3 z3a1 z3a2 z3a3; do
    install_file "qdata/equip/${fn}.dat" || return 1
    install_file "qdata/equip/${fn}.fli" || return 1
    install_file "qdata/equip/${fn}i.fli" || return 1
    install_file "qdata/equip/${fn}o.fli" || return 1
  done

  for fn in m1b m1bb m1l1 m1l2 m2b m2bb m2l1 m2l2 m2l3 m3b m3bb m3l1 m3l2 m3l3 z1b z1bb z1l1 z1l2 z2b z2bb z2l1 z2l2 z2l3 z3b z3bb z3l1 z3l2 z3l3; do
    install_file "qdata/equip/${fn}.dat" || return 1
    install_file "qdata/equip/${fn}i.fli" || return 1
    install_file "qdata/equip/${fn}o.fli" || return 1
  done

  install_dir "levels" || return 1

  install_dir "maps" || return 1

  for fn in 000 001 002 003 004 005 006 007 008 009 010 011 020 021 022 025 026 027 028 030 032 035 036 040 041 044 045 046 047 050 079; do
    install_file "maps/map${fn}.scn" || return 1
  done

  install_dir "sound" || return 1

  for fn in music.dat sample.ad; do
    install_file "sound/${fn}" || return 1
  done

  install_dir "intro" || return 1

  # Copy files which on the CD are in per-language dir
  install_file_to "language/$LANG/text.dat" "data" || return 1
  install_file_to "language/$LANG/syn_ele.smk" "data" || return 1
  install_file_to "language/$LANG/chu_ele.smk" "data" || return 1

  install_file_to "language/$LANG/intro.smk" "intro" || return 1

  return 0
}

extract_packages()
{
  unzip -o "${LEVELS_PACKAGE}.zip" -d "${TARGET}" || return 1
  find "$TARGET/swars/LEVELS" -mindepth 1 -maxdepth 1 -type f -iname 'c*.*' \
    | while read file; do
    mv -vn "$file" -t "${TARGET}/levels" || return 1
      done
  find "$TARGET/swars/MAPS" -mindepth 1 -maxdepth 1 -type f -iname 'map*.*' \
    | while read file; do
    mv -vn "$file" -t "${TARGET}/maps" || return 1
      done
  rm -rf "${TARGET}/swars" || return 1

  unzip -o "${GFX_PACKAGE}.zip" -d "${TARGET}" || return 1
  find "$TARGET/swars/data" -mindepth 1 -maxdepth 1 -type f -iname '*.*' \
    | while read file; do
    mv -vn "$file" -t "${TARGET}/data" || return 1
      done
  rm -rf "${TARGET}/swars" || return 1

  unzip -o "${SFX_PACKAGE}.zip" -d "${TARGET}" || return 1
  find "$TARGET/swars/sound" -mindepth 1 -maxdepth 1 -type f -iname '*.dat' \
    | while read file; do
    mv -vn "$file" -t "${TARGET}/sound" || return 1
      done
  rm -rf "${TARGET}/swars" || return 1

  return 0
}

check_language()
{
  case "$LANG" in
    eng)
      LANG_NAME="English"
      ;;
    fre)
      LANG_NAME="French"
      ;;
    ger)
      LANG_NAME="German"
      ;;
    ita)
      LANG_NAME="Italian"
      ;;
    spa)
      LANG_NAME="Spanish"
      ;;
    swe)
      LANG_NAME="Swedish"
      ;;
    *)
      echo "Unsupported language: $LANG." >&2
      return 1
      ;;
  esac
  return 0
}

create_config_ini()
{
  cat<<EOF >"$TARGET/config.ini"
CD="D:\\GAME\\"
InstallDrive="C:\\"
Language="$LANG_NAME"
Intro="Max"
Anims="Max"
Sound="Max"
Levels="Max"
Data="Max"
Maps="Max"
DOS="Max"
EOF
  [ $? -eq 0 ] || return 1
  return 0
}

error()
{
  if [ "$OWN_TARGET" = "yes" ]; then
    echo "Removing target directory."
    rm -rf "$TARGET"
  fi
  echo "Failed to install data (consult the above error messages)."
  exit 1
}

check_source || error
check_music_tools || error
check_language || error
check_target || error
download_packages || error
copy_music || error
copy_data || error
extract_packages || error
create_config_ini || error

echo "Data successfully installed."
