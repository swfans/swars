name: Build

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  ubuntu-gcc:
    runs-on: ubuntu-20.04
    name: "Linux Ubuntu"
    container:
      image: ubuntu:20.04
    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC
    steps:
      - name: Install GIT
        run: |
          # install GIT, as without it checkout would use REST API
          apt update
          apt install -y \
            git

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set ownership
        run: |
          # this is to fix GIT not liking owner of the checkout dir
          chown -R $(id -u):$(id -g) $PWD

      - name: Install dependencies
        run: |
          # add i386 dependencies
          dpkg --add-architecture i386

          apt update
          apt install -y \
            gcc-multilib g++-multilib lib32z1 python3 \
            vorbis-tools cdparanoia \
            libsdl1.2-dev:i386 libopenal-dev:i386 \
            libvorbis-dev:i386 libvorbisfile3:i386 \
            libogg-dev:i386 \
            libwildmidi-dev:i386

          apt install -y \
            build-essential autoconf libtool make

          apt install -y \
            python3-polib

      - name: Autoreconf
        run: autoreconf -ivf

      - name: Configure
        env:
          CFLAGS: "-m32"
          CXXFLAGS: "-m32"
          LDFLAGS: "-m32"
          PKG_CONFIG_PATH: "/usr/lib/i386-linux-gnu/pkgconfig"
        run: |
          mkdir -p release; cd release
          ../configure

      - name: Build executable
        run: |
          cd release
          make V=1

      - name: Copy for package
        run: |
          VER_BUILD=$(git rev-list --count HEAD)
          cd release
          make V=1 DESTDIR=$PWD/pkg install
          echo "PKG_NAME=swars-0_3_3_$VER_BUILD-ubuntu-patch" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: release/pkg/**

  windows-msys2:
    name: "Windows MSYS2"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: >-
              git
              unzip
              mingw-w64-i686-python-pip
              mingw-w64-i686-toolchain
              mingw-w64-i686-autotools
              mingw-w64-i686-libpng
              mingw-w64-i686-SDL
              mingw-w64-i686-openal
              mingw-w64-i686-libvorbis
              mingw-w64-i686-libogg

      - name: Install python modules
        run: |
          python -m pip install polib

      - name: Install WildMIDI
        run: |
          wget https://github.com/Mindwerks/wildmidi/releases/download/wildmidi-0.4.5/wildmidi-0.4.5-win32.zip
          unzip wildmidi-0.4.5-win32.zip
          cp wildmidi-0.4.5-win32/*.h /mingw32/include/
          cp wildmidi-0.4.5-win32/*.a /mingw32/lib/
          cp wildmidi-0.4.5-win32/*.dll /mingw32/bin/

      - name: Autoreconf
        run: autoreconf -ivf

      - name: Configure
        env:
          CFLAGS: "-m32"
          CXXFLAGS: "-m32"
          LDFLAGS: "-m32"
        run: |
          mkdir -p release; cd release
          ../configure

      - name: Build executable
        run: |
          cd release
          make V=1

      - name: Copy for package
        run: |
          VER_BUILD=$(git rev-list --count HEAD)
          cd release
          make V=1 DESTDIR=$PWD/pkg install
          echo "PKG_NAME=swars-0_3_3_$VER_BUILD-win32-patch" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: release/pkg/**
